<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Iain Chalmers</title><link href="http://icchalmers.github.io/" rel="alternate"></link><link href="http://icchalmers.github.io/feeds/finalproject.atom.xml" rel="self"></link><id>http://icchalmers.github.io/</id><updated>2015-06-06T00:00:00+01:00</updated><entry><title>WordClock2.0 Update 4: Software and Leaking Light</title><link href="http://icchalmers.github.io/wordclock20-update-4-software-and-leaking-light.html" rel="alternate"></link><updated>2015-06-06T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-06-06:wordclock20-update-4-software-and-leaking-light.html</id><summary type="html">&lt;h2&gt;ESP8266 With The Arduino IDE&lt;/h2&gt;
&lt;p&gt;So I managed to get the basic functionality of the word clock working.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_NTPTimeWorking" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_NTPTimeWorking.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;I'm using &lt;a href="https://github.com/esp8266/Arduino"&gt;the Arduino IDE for the ESP8266&lt;/a&gt;, along with the following additional libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marcoschwartz/aREST"&gt;&lt;strong&gt;aRest&lt;/strong&gt;&lt;/a&gt;: for the "RESTful" web interfacing.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Makuna/NeoPixelBus"&gt;&lt;strong&gt;NeoPixelBus&lt;/strong&gt;&lt;/a&gt;: by Makuna. It's based on the &lt;a href="https://github.com/adafruit/Adafruit_NeoPixel"&gt;Adafruit NeoPixel library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Makuna/Rtc"&gt;&lt;strong&gt;Rtc&lt;/strong&gt;&lt;/a&gt;: also by Makuna. For interfacing to the DS2331/DS3232.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PaulStoffregen/Time"&gt;&lt;strong&gt;Time&lt;/strong&gt;&lt;/a&gt;: by the amazing Paul Stoffregen.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/moeur/Arduino_ESP8266"&gt;&lt;strong&gt;NTP&lt;/strong&gt;&lt;/a&gt;: by moeur. He basically took the NTP example from Time library and packaged it up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall I've found the Arduino IDE to be...&lt;em&gt;OK&lt;/em&gt;. Like the Arduino IDE for use with an actual Arduino, it's great for getting up and running quickly. Unfortunately, I've also outgrown it rather quickly too. Some of the issues I've had:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The I2C library is a bit bang implementation, and so is the NeoPixelBus WS2812b protocol. I've been getting some funny interactions between the two. As far as I can tell, the I2C library bit banging relies on interrupts, but the WS2812b protocol is very timing sensitive so disables interrupts while it's running. Results? I get really inconsistent I2C for the RTC when also using the WS2812 LEDs. As a result, the RTC isn't active right now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syncing all the necessary tasks to keep the clock running is pretty cumbersome. I think the clock would be a great project to try my hands at an RTOS (&lt;strong&gt;R&lt;/strong&gt;eal &lt;strong&gt;T&lt;/strong&gt;ime &lt;strong&gt;O&lt;/strong&gt;perating &lt;strong&gt;S&lt;/strong&gt;ystem) using the ESP8266 SDK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The IDE is still under heavy development. I couldn't even get ANY I2C working under the 1.6.1-esp8266-1 release. I had to build the IDE from source.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;A Quick Software Overview&lt;/h2&gt;
&lt;p&gt;I won't run through the whole program, but here's the main &lt;code&gt;loop()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;//mDNS update&lt;/span&gt;
  &lt;span class="n"&gt;mdns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Output the time to the LEDs once per minute&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldMinutes&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;oldMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;DisplayTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Print the time every 10 seconds&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;oldTime&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;oldTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;digitalClockDisplay&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Handle REST calls&lt;/span&gt;
  &lt;span class="n"&gt;WiFiClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
      &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic steps of the loop are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update the mDNS responder. This lets mDNS compatible systems connect to the clock using &lt;code&gt;http://wordclock.local&lt;/code&gt;, instead of having to find it's IP address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if it's a new minute. If it is, update the LEDs to show the time (and print the time in words to the serial port).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if 10s have elapsed. If so, print the current time to the serial port.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handle any new clients using the aREST API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The aREST API exposes a couple of functions to a connected user. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http://wordclock.local/&lt;/code&gt; will return a list of variables exposed to the API and their current value. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{&amp;quot;variables&amp;quot;: {&amp;quot;red&amp;quot;: 3, &amp;quot;green&amp;quot;: 64, &amp;quot;blue&amp;quot;: 49},
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These variables can then be accessed on their own at any time. For example with &lt;code&gt;http://wordclock.local/red&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http://wordclock.local/id&lt;/code&gt; will return some information about the clock. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{&amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;wordclock&amp;quot;, &amp;quot;connected&amp;quot;: true}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http://wordclock.local/led?params=&lt;/code&gt; can be used to set/query the state of the LED on the control PCB. Sending &lt;code&gt;on&lt;/code&gt; as the parameter turns the LED on. Sending &lt;code&gt;off&lt;/code&gt; turns the LED off. Sending anything else will return the current state of the LED&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http://wordclock.local/rgb?params=&lt;/code&gt; can be used to set the colour of the RGB LEDs. The format is &lt;code&gt;R,G,B&lt;/code&gt;, where &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt; are values from 0 to 255 for that colour. Note that there is not sanity checking of the input, so be careful!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;aREST also gives direct control over pins, which I hate and can't easily turn off. In a future version of the code I plan to get rid of aREST and do it myself (or find a better library).&lt;/p&gt;
&lt;h2&gt;Current Problems&lt;/h2&gt;
&lt;p&gt;I've already mention the I2C/RTC problem. Some other bits of the code that need worked on are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the network goes down, the NTP check seems to hang the code somewhere. The only option at that point is a hard reset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The WiFi SSID and password are hard coded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Temperature based throttling of LED brightness using the temperature reading from the DS3232.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The time zone is currently hard coded, and the NTP library does DST compensation by default, but using the American dates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall though, I've met all of my "must haves" that I specified in &lt;a href="http://icchalmers.github.io/week-15-applications-and-implications-aka-pick-a-final-project.html"&gt;Week 15: Applications and Implications (AKA Pick A Final Project)&lt;/a&gt;. I've also got a good start on some of the "nice to haves". I have a basic android app for setting the LED colour, and in fact the ESP8266 will remember the last network it connected to my default!&lt;/p&gt;
&lt;h2&gt;How Bright? Too Bright!&lt;/h2&gt;
&lt;p&gt;One annoying problem I've noticed is light leakage. I used some easier-to-laser poplar plywood to cut the internal grid, and it turns out it's not particularly opaque with the bright LEDs!&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_GridLeak" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_GridLeak.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;To try and mitigate the leakage, I took the grid apart and spray painted it white.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_GridLeak_Painting" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_GridLeak_Painting.jpg" title="" /&gt;
&lt;img alt="wordClock2.0_GridLeak_PaintedGrid" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_GridLeak_PaintedGrid.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;The result? Actually, it hardly made any difference at all! Instead, it's much easier to just limit the LED brightness. A white level of 60,60,60 it plenty bright in even a well lit room, and significantly reduces the amount of light leaking to surrounding letters. It should also help with reducing temperature build up inside the enclosure. &lt;/p&gt;
&lt;p&gt;In the future, I'll make sure and stick to denser birch plywood for the exterior &lt;strong&gt;and&lt;/strong&gt; interior of the clock.&lt;/p&gt;
&lt;h2&gt;But For Now...&lt;/h2&gt;
&lt;p&gt;...I'm basically done! The clock is &lt;strong&gt;far&lt;/strong&gt; from finished, but it's more than enough for Fab Academy. All the future work will be done &lt;a href="github.com/icchalmers/WordClock_v2.0"&gt;on my GitHub for the project&lt;/a&gt;.&lt;/p&gt;</summary><category term="final project"></category></entry><entry><title>WordClock2.0 Update 3: Power Distribution</title><link href="http://icchalmers.github.io/wordclock20-update-3-power-distribution.html" rel="alternate"></link><updated>2015-06-05T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-06-05:wordclock20-update-3-power-distribution.html</id><summary type="html">&lt;h2&gt;Wires Wires Everywhere&lt;/h2&gt;
&lt;p&gt;This is what the inside of WordClock1.0 looked like:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock1.0_internal" src="http://icchalmers.github.io/images/FinalProject/wordClock1.0_internal.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;It took &lt;strong&gt;forever&lt;/strong&gt; to wire all the LEDs, and the duct tape/glue to hold them in place was a mess. To make life easier for myself, I set about designing some power and signal distribution boards.&lt;/p&gt;
&lt;h2&gt;Power Distribution Boards&lt;/h2&gt;
&lt;p&gt;As a quick sanity check, I did a trace layout on paper with some of the LED strips.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="powerDistribution_PaperProof" src="http://icchalmers.github.io/images/FinalProject/powerDistribution_PaperProof.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;After that, it was back to KiCAD. I made sure to layout the schematic in such a way that it pretty much translated directly to the PCB layout.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="powerDistributionSchematic" src="http://icchalmers.github.io/images/FinalProject/powerDistributionSchematic.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;What's nice about the design is that it's symmetrical: you can just cut two of the same board and use one for power and one for ground.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="powerDistributionLayoutSingle" src="http://icchalmers.github.io/images/FinalProject/powerDistributionLayoutSingle.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;As always, I printed the PCB out on paper first and made sure it looked sensible using the &lt;a href="http://icchalmers.github.io/bonus-content-week-35-even-more-computer-controlled-cutting.html"&gt;cardboard word clock&lt;/a&gt;. The eagle eyed amongst you will notice that the paper print out in the photo below doesn't have the mounting holes. Spotting that mistake on paper saved me a lot of time!&lt;/p&gt;
&lt;p&gt;One other minor mistake was that I forgot to add a footprint for adding a nice big 1000µF capacitor as a local power source for the LEDs. Luckily I don't seem to need it, but I've already updated the PCB to have a space for one just in case. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="powerDistribution_PaperRail" src="http://icchalmers.github.io/images/FinalProject/powerDistribution_PaperRail.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Happy with the design, I milled a pair of boards on the Denford. This is a board that really shows how great the Denford is compared to the Modela. Not only would the board not have fit on the Modela bed, but I imagine that doing a board this long would be a &lt;strong&gt;nightmare&lt;/strong&gt; for getting a consistent cut depth on the copper. Yay for floating heads!&lt;/p&gt;
&lt;p&gt;With the boards milled, I started soldering the LED strips onto the boards, checking that everything was working every couple of strands.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="powerDistribution_Soldering" src="http://icchalmers.github.io/images/FinalProject/powerDistribution_Soldering.jpg" title="" /&gt;
&lt;img alt="powerDistribution_SolderTestingf" src="http://icchalmers.github.io/images/FinalProject/powerDistribution_SolderTesting.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;An added benefit of the power distribution boards is that they also act as clamps that hold the LEDs in place. That's two problems fixed with one elegant solution!&lt;/p&gt;
&lt;h2&gt;Cutting Another Control PCB&lt;/h2&gt;
&lt;p&gt;It was at this point that I had a better idea of where I wanted to mount the control PCB, so I cut a couple of new boards that had mounting holes in the right place.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoard2.0_JustCut" src="http://icchalmers.github.io/images/FinalProject/controlBoard2.0_JustCut.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Before soldering everything up, I did a dry-run and made sure that everything fit together properly.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_InteriorControlBoardMountingTest" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_InteriorControlBoardMountingTest.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;In it's current iteration, I have to use some stand-offs to mount the control PCB above the central support strip. In the near future (but after Fab Academy is finished), I plan on getting rid of the central support in favour of two supports that would line up with the mounting holes on the PCB. That would save me a nut and a bolt, and also mean I could make the clock thinner. The chunky version is cool for a free standing clock, but a thinner one could potentially be wall mounted.&lt;/p&gt;
&lt;p&gt;Happy with the design for the moment, I soldered up one of the new boards and had my first real look at what the interior of the clock would look like.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_InteriorAssembled" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_InteriorAssembled.jpg" title="" /&gt;
&lt;img alt="wordClock2.0_InteriorControlBoardClearance" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_InteriorControlBoardClearance.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;I hope we can all agree that that is a &lt;strong&gt;HELL&lt;/strong&gt; of a lot better than v1.0!&lt;/p&gt;
&lt;h2&gt;Pretty Pattern Testing&lt;/h2&gt;
&lt;p&gt;With the hardware basically finished, I extended my rainbow test pattern sketch to use all 122 LEDs. It looks pretty funky if I do say so myself!&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_InteriorRGBGrid" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_InteriorRGBGrid.jpg" title="" /&gt;
&lt;img alt="wordClock2.0_InteriorRGBWordMask" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_InteriorRGBWordMask.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Hardware is hard and software is easy, right?! Well I guess there's only one way to find out - go check out the next update: &lt;a href="http://icchalmers.github.io/wordclock20-update-4-software-and-leaking-light.html"&gt;Update 4: Software and Leaking Light&lt;/a&gt;.&lt;/p&gt;</summary><category term="final project"></category></entry><entry><title>WordClock2.0 Update 2: Laser Cutting and Mechanical Improvements</title><link href="http://icchalmers.github.io/wordclock20-update-2-laser-cutting-and-mechanical-improvements.html" rel="alternate"></link><updated>2015-06-04T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-06-04:wordclock20-update-2-laser-cutting-and-mechanical-improvements.html</id><summary type="html">&lt;h2&gt;Cutting A New Clock&lt;/h2&gt;
&lt;p&gt;I made a few minor adjustments to the word clock model that I already had and cut it out from some 3mm plywood. &lt;/p&gt;
&lt;p&gt;Unfortunately I had a problem: my kerf adjustment was off. I had just used a value I had used in the past but it turns out it wasn't quite right. The result was a clock that was not so much press-fit as never-come-apart-again fit. It could support it's entire weight on one joint.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_TooTight" src="http://icchalmers.github.io/images/FinalProject/plyProblems_TooTight.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;So I went back to basics and made some extra test cuts.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_PressFitTests" src="http://icchalmers.github.io/images/FinalProject/plyProblems_PressFitTests.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;In the end the problem wasn't actually my kerf setting - it was a PDF import problem. I had always had problems importing DWG files from Inventor into CorelDRAW so had been using PDF files instead. Unfortunately there were some conversion errors in the PDF process. They were small enough that everything looked OK, but some small detail (small as in &lt;em&gt;sub millimetre&lt;/em&gt;) was lost. The result: bad press fit.&lt;/p&gt;
&lt;p&gt;I've since found out that there are actually &lt;strong&gt;two&lt;/strong&gt; versions of DWG: an AutoCAD version and an Inventor version. They appear to be quite different internally, and most non-Autodesk applications can only seem to deal with the AutoCAD version. Why they didn't use a new file extension for what is essentially a new format is beyond me!&lt;/p&gt;
&lt;p&gt;I've now got my DWG files from Inventor being saved in the AutoCAD format, so I can import my cut outlines into CorelDRAW perfectly. I'm still compensating for kerf in Inventor though, and it's a pest having to regenerate and layout all the parts for each adjustment. I think in the future I'll ignore kerf in the 3D model, and instead do adjustments as outline offsets from within CorelDRAW.&lt;/p&gt;
&lt;h2&gt;Ply Problems&lt;/h2&gt;
&lt;p&gt;I wanted a really aesthetically pleasing finish on the clock face, so I opted to use some really nice 3mm birch plywood. Unfortunately, it's not the best for laser cutting.&lt;/p&gt;
&lt;p&gt;Using our standard settings for 3mm ply, I was getting through &lt;em&gt;most&lt;/em&gt; of the time, but still having to use a bit of force to remove pieces. Any kind of force on the letters is useless because it just results in breaking the support struts. Internally, the ply also had quite a few knots, which basically stopped the laser dead in it's tracks.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_Knots" src="http://icchalmers.github.io/images/FinalProject/plyProblems_Knots.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, I tried Dremeling down a bit to save the piece but it ended up being a waste of time. Instead, I opted to really drop the laser speed down. I had avoided doing this in the first instance as it leaves a really smoky finish on the wood that looks &lt;a href="http://www.urbandictionary.com/define.php?term=naff"&gt;naff&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;To avoid as much marking as possible, I tried coating the front layer of the plywood with masking tape.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_MaskingTest" src="http://icchalmers.github.io/images/FinalProject/plyProblems_MaskingTest.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;I was happy with the result, so cut a new front face. I ended up using our standard settings for 6mm ply to get through the 3mm ply + knots + masking tape &lt;strong&gt;every time&lt;/strong&gt;.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_FallThroughLetters" src="http://icchalmers.github.io/images/FinalProject/plyProblems_FallThroughLetters.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;You can see that the letters are basically falling out once they are cut. No more prodding at letters with a craft knife hoping I didn't break any supports!&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_MaskedFaceCut" src="http://icchalmers.github.io/images/FinalProject/plyProblems_MaskedFaceCut.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Removing the masking tape and a bit of light sanding later, the ply looks &lt;strong&gt;really&lt;/strong&gt; good.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plyProblems_CleanFaceCut" src="http://icchalmers.github.io/images/FinalProject/plyProblems_CleanFaceCut.jpg" title="" /&gt;&lt;/p&gt;
&lt;h2&gt;A Teak Frame&lt;/h2&gt;
&lt;p&gt;To add some class to the clock I decided to go a bit old school and hand make a frame from some reclaimed teak. I stained it with some Danish oil to give it a nice dark finish. I think the contrast it makes with the light birch face is pretty damn sexy.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wordClock2.0_TeakFrame" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_TeakFrame.jpg" title="" /&gt;
&lt;img alt="wordClock2.0_FirstExterior" src="http://icchalmers.github.io/images/FinalProject/wordClock2.0_FirstExterior.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;With the outside of the clock looking much better, it was time to sort out all the damn wiring inside! Check it out in &lt;a href="http://icchalmers.github.io/wordclock20-update-3-power-distribution.html"&gt;Update 3: Power Distribution&lt;/a&gt;.&lt;/p&gt;</summary><category term="final project"></category></entry><entry><title>WordClock2.0 Update 1: Initial Electronics Design</title><link href="http://icchalmers.github.io/wordclock20-update-1-initial-electronics-design.html" rel="alternate"></link><updated>2015-06-03T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-06-03:wordclock20-update-1-initial-electronics-design.html</id><summary type="html">&lt;h2&gt;Electronics Design&lt;/h2&gt;
&lt;p&gt;Based on the requirements I set for myself in &lt;a href="http://icchalmers.github.io/week-15-applications-and-implications-aka-pick-a-final-project.html"&gt;Week 15: Applications and Implications &lt;/a&gt;, I set about designing the control PCB for the clock.&lt;/p&gt;
&lt;p&gt;Originally, I hadn't been sure what processor configuration I was going to go with. I had heard that the ESP8266 wasn't particularly reliable when it came to driving WS2812b LEDs directly. To work around this, I was planning on either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Using a PSoC4 for most parts with an ESP8266 just for the networking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using an ESP8266 for most parts, with just an ATtiny85 for driving the LEDs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As luck would have it, I noticed that the &lt;a href="https://github.com/Makuna/NeoPixelBus"&gt;NeoPixelBus&lt;/a&gt; library was now listed as being supported in the Arduino IDE for the ESP8266. I figured I would give it a try, as being able to run everything on the ESP8266 would save a lot of hassle! If it turned out to be unreliable, my backup plan was to add an ATtiny85 as an I2C slave to the design, and use it to drive the LEDs.&lt;/p&gt;
&lt;p&gt;The schematic for the control board is pretty self explanatory - it's made up of sub circuits I've already made elsewhere for the class. I've just noticed that I have the LED round the wrong way in the schematic - woops! Luckily I didn't follow the schematic to the letter when I was stuffing the board. It's been fixed in the schematic but I'm too lazy to create a whole new image for such a minor mistake.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoardSchematic" src="http://icchalmers.github.io/images/FinalProject/controlBoardSchematic.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;The PCB layout was a relatively painless affair thanks to the discrete sub circuits. Two things worth mentioning:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The version below is my final version. The rest of the pictures in this post show a version which has much smaller mounting holes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The footprint for the DS3232 is also compatible with the DS3231&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoardLayout" src="http://icchalmers.github.io/images/FinalProject/controlBoardLayout.png" title="" /&gt;&lt;/p&gt;
&lt;h2&gt;Mechanical Checks&lt;/h2&gt;
&lt;p&gt;As with all my boards, I printed it out to scale to check all my footprints. I also used it in conjunction with the &lt;a href="http://icchalmers.github.io/bonus-content-week-35-even-more-computer-controlled-cutting.html"&gt;cardboard word clock&lt;/a&gt; to make some initial decisions about how I was going to mount the PCB inside the clock.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoard_PaperPlacement" src="http://icchalmers.github.io/images/FinalProject/controlBoard_PaperPlacement.jpg" title="" /&gt;&lt;/p&gt;
&lt;h2&gt;Making the PCB&lt;/h2&gt;
&lt;p&gt;Happy with the design, I cut it out on the Denford PCB engraver. Total cut time was in the region of half an hour.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoard1.0_JustCut" src="http://icchalmers.github.io/images/FinalProject/controlBoard1.0_JustCut.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Just for interest, here's a comparison of a PCB cut with a brand new bit and one cut wit an old (and potentially broken) end mill. Both have had their outer edge cleaned up, but no further post processing.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoard1.0_OldBit_vs_NewBit" src="http://icchalmers.github.io/images/FinalProject/controlBoard1.0_OldBit_vs_NewBit.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;The top board was using an old bit and had a &lt;strong&gt;LOT&lt;/strong&gt; of burrs. It would have needed a significant amount of work to clean it up. In comparison, the bottom board was cut using a new endmill. It needed almost no post processing at all, and has a super crisp cut. &lt;/p&gt;
&lt;p&gt;It's pretty hard to know how a 0.4mm endmill is fairing just by looking at it. I think the easiest way to spot a mill at the end of it's life is based on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Track width vs clearance width:&lt;/strong&gt; I use 0.4mm tracks as a standard, and a new 0.4mm bit should give a clearance of 0.4mm. As the mill wears out, it's cutting width decreases. On the bottom board, you can tell that the traces and cuts are about the same width. On the top board, the traces are significantly wider.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Burrs:&lt;/strong&gt; Although some burrs are to be expected, if you feel like you would have to clean up a lot of traces with a craft knife then there is a good chance the cutter is past it (or you have your settings totally wrong!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I want this board to last, I washed it in soapy water and tinned all the traces.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoard1.0_Tinned" src="http://icchalmers.github.io/images/FinalProject/controlBoard1.0_Tinned.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;After that I gathered all the necessary components and stuffed the board. I did have one &lt;em&gt;small&lt;/em&gt; misshap during the stuffing. I accidentally soldered the voltage shifter off-by-one and let the magic smoke out when I applied power. Woops!&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="components" src="http://icchalmers.github.io/images/FinalProject/components.jpg" title="" /&gt;
&lt;img alt="ControlBoard1.0_Assembled" src="http://icchalmers.github.io/images/FinalProject/ControlBoard1.0_Assembled.jpg" title="" /&gt;&lt;/p&gt;
&lt;h2&gt;Hello World Testing&lt;/h2&gt;
&lt;p&gt;Using the &lt;a href="https://github.com/esp8266/Arduino"&gt;Arduino IDE for the ESP8266&lt;/a&gt;, I set up a quick rainbow LED sketch as a "Hello World!" test. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="controlBoard1.0_InitialTesting" src="http://icchalmers.github.io/images/FinalProject/controlBoard1.0_InitialTesting.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Success! Running everything on one microcontroller should really easy development (and BOM cost). I knew I was going to have to make another PCB as my mounting holes for this one were pretty pathetic, but it did mean I had a small prototype I could carry about in my bag.&lt;/p&gt;
&lt;p&gt;Basic electronics hardware done, I moved onto &lt;a href="http://icchalmers.github.io/wordclock20-update-2-laser-cutting-and-mechanical-improvements.html"&gt;Laser Cutting and Mechanical Improvements&lt;/a&gt;.&lt;/p&gt;</summary><category term="final project"></category></entry><entry><title>Final Project Proposals</title><link href="http://icchalmers.github.io/final-project-proposals.html" rel="alternate"></link><updated>2015-02-02T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-02:final-project-proposals.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;"Nothing is more dangerous than an idea when it is the only one you have." - Emile Chartier&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've actually got a few potential final projects, and I have no doubt that I'll think of more as the weeks go on. Here's what I've thought of so far.&lt;/p&gt;
&lt;h2&gt;Word Clock&lt;/h2&gt;
&lt;p&gt;For my Mum's Christmas last year I decided I would make her a word clock. It was inspired by &lt;a href="http://imgur.com/a/iMXmj?gallery"&gt;this word clock posted on imgur&lt;/a&gt;. Here's my version:&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/wordClock_v1.jpg" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;I started thinking about making it in August. It was going to have an app that connected over Bluetooth to set the time (and re-sync the time to the phone automatically when it was in range, &lt;em&gt;obviously&lt;/em&gt;...), chose the colour of the LEDs and set alarms. It was going to have a beautiful teak fame (I even took an evening class in woodworking so I could make it). It was going to have a custom PCB I had had made at &lt;a href="https://oshpark.com/"&gt;OSH Park&lt;/a&gt;, running on an ARM Cortex M0+ (and it certainly was &lt;strong&gt;NOT&lt;/strong&gt; going to use two Arduinos or have the kind-of-beautiful but also kind-of-vomit-inducing wiring of the one I was using for inspiration).&lt;/p&gt;
&lt;p&gt;It was going to be &lt;strong&gt;AWESOME&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And then I ended up doing all of the work in a panicked two days at the end of December because our FabLab was closing a week earlier than I expected and I &lt;em&gt;obviously&lt;/em&gt; hadn't had the time to work on it between August and December...&lt;/p&gt;
&lt;p&gt;But hey, it worked, and my Mum loved it. Take the front off and put it in test mode and it even makes a pretty good disco light.&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/insideWordClock_v1.jpg" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;I promised her a revised version "soon". One where she could do all (&lt;strong&gt;cough&lt;/strong&gt; &lt;em&gt;some&lt;/em&gt; &lt;strong&gt;cough&lt;/strong&gt;) of the above. Especially the necessary things like, you know, being able to set the time... (It works for now. It uses a battery backed RTC that shouldn't be off by more than a minute over an entire year. It only has a time resolution of five minutes anyway).&lt;/p&gt;
&lt;h3&gt;However...&lt;/h3&gt;
&lt;p&gt;I feel like it's cheating choosing a final project where I already have a V1.0. Instead, I'll probably do V2.0 development as part of my weekly classes. Maybe add some capacitive touch buttons hidden under the wood, or an ESP8266 to pull network time in over WiFi. Perhaps add a light sensor to automatically control the brightness of the LEDs so they don't blind you at night. Who knows. Time will tell.&lt;/p&gt;
&lt;h2&gt;Light Up Catan Table&lt;/h2&gt;
&lt;p&gt;Forget Monopoly. All it's good for is destroying friendships.&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/monopolyFlip.jpg" title="Seriously, don't play it" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Instead, play &lt;a href="http://www.catan.com/"&gt;Catan&lt;/a&gt;. My first impression was "wow this looks super nerdy". Not that there's anything &lt;em&gt;wrong&lt;/em&gt; with super nerdy. In actual fact, all the cool kids are playing it - &lt;a href="http://www.washingtonpost.com/blogs/early-lead/wp/2015/01/16/the-green-bay-packers-are-obsessed-with-settlers-of-catan/"&gt;even the Green Bay Packers&lt;/a&gt; (who may or may not be cool. I have no idea. I hate American football).&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/catanBaseBoard.jpg" title="So much more fun. Source: https://garydgardiner.files.wordpress.com/2012/06/settlersofcatan.jpg" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;There is one big problem with Catan though: the board. Over time, those cardboard pieces warp and it becomes &lt;strong&gt;IMPOSSIBLE&lt;/strong&gt; to get a flat board that stays together. It also takes &lt;strong&gt;FOREVER&lt;/strong&gt; to set up. That picture is just the base game for 3-4 players. Throw in an expansion pack and increase it to 5-6 players and suddenly setting up the board can take almost as long as actually playing.&lt;/p&gt;
&lt;p&gt;Lots of people have tried to solve these problems. The board has been &lt;a href="https://www.kickstarter.com/projects/trammel/the-official-settlers-of-catan-gaming-board"&gt;kickstarted&lt;/a&gt;, &lt;a href="http://www.iceboxrobotics.com/blog/2012/1/19/settlers-of-catan-3d-game-board.html"&gt;3D printed&lt;/a&gt; and &lt;a href="http://www.instructables.com/id/Custom-Laser-Cut-Catan-Board/"&gt;laser cut&lt;/a&gt;. Hell, it's even been &lt;a href="http://www.instructables.com/id/Catan-Cakes/"&gt;baked&lt;/a&gt;. You could probably complete the entire Fab Academy doing projects based just on the Catan board.&lt;/p&gt;
&lt;p&gt;But I have yet to see a version of Catan that uses the electronic component closest to any electronic engineer's heart: &lt;strong&gt;LEDs&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;The Plan&lt;/h3&gt;
&lt;p&gt;The idea is to make a coffee table with embedded RGB LEDs, similar to this one:&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;a href="http://imgur.com/a/CGV17"&gt;&lt;img src ="http://icchalmers.github.io/images/LEDTable.jpg" title="Pretty damn cool" /&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Instead of having a square grid, it would have a hexagonal one. You could automatically generate a game board, or load a favourite one. It could even be linked into an app to allow control of the table/game (app development &lt;em&gt;*shudder*&lt;/em&gt;). You would still need the pieces from the original game (no bad thing - with such easy digital fabrication, board game piracy is already becoming a thing), but overall set up time would be reduced and the board would be relatively frustration free. There are a whole host of extra features that I could implement too.&lt;/p&gt;
&lt;p&gt;Obviously there are some glaring challenges from the get go. Making a hexagonal grid would be difficult, and making a table isn't exactly easy. Although there is the "Make Something Big" week, our FabLab doesn't actually have a large format CNC machine. We'll be going to &lt;a href="http://www.maklab.co.uk/"&gt;MAKLab&lt;/a&gt; to complete that assignment, but something like an LED table would need more time than we have allotted. If it comes to it, I could make a smaller, non-table, version.&lt;/p&gt;
&lt;p&gt;Overall though, this is the idea that I'm most excited about, so it's the goal for now. Ask me how I feel about it the day before projects are due.&lt;/p&gt;
&lt;h2&gt;Home Automation&lt;/h2&gt;
&lt;p&gt;I also have some much more ephemeral ideas about home automation. A lovely wireless network of sensors controlling everything I can conceivably think might benefit (or not) from a connection to the internet. The Internet of Things is all the rage right now after all. Does my bin really &lt;em&gt;need&lt;/em&gt; to be connected to the internet?! Why the hell not!&lt;/p&gt;
&lt;p&gt;This idea is pretty much on the back burners for now. I might do a mini version for the networking week. After all, I am doing a PhD in wireless communications, and there is nothing an engineer loves more than showing off. &lt;em&gt;[Famous last words....]&lt;/em&gt;&lt;/p&gt;</summary><category term="final project"></category></entry></feed>