<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Iain Chalmers</title><link href="http://icchalmers.github.io/" rel="alternate"></link><link href="http://icchalmers.github.io/feeds/all.atom.xml" rel="self"></link><id>http://icchalmers.github.io/</id><updated>2015-04-29T00:00:00+01:00</updated><entry><title>Week 13: Networking</title><link href="http://icchalmers.github.io/week-13-networking.html" rel="alternate"></link><updated>2015-04-29T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-04-29:week-13-networking.html</id><summary type="html">&lt;h2&gt;This Week's Assignment&lt;/h2&gt;
&lt;p&gt;This week's assignment was to design and build a wired and/or wireless network connecting at least two processors.&lt;/p&gt;
&lt;p&gt;I decided to do both. I made a wireless module for the &lt;a href="http://icchalmers.github.io/week-11-outputs.html"&gt;character LCD board I made for Outputs week&lt;/a&gt;. The module uses an &lt;a href="http://www.esp8266.com/"&gt;ESP8266 WiFi module&lt;/a&gt; to receive commands from the local network and then writes strings to the LCD board using I2C.&lt;/p&gt;
&lt;p&gt;Here's the final result:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wirelessScreen" src="http://icchalmers.github.io/images/Week13/wirelessScreen.jpg" title="I swear the USB cable is just for power" /&gt;&lt;/p&gt;
&lt;h2&gt;Designing The Board&lt;/h2&gt;
&lt;p&gt;The board I designed this week is made to plug into my LCD character display board. The targets for the design were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use an ESP-03 module (as that's the SMD version I happened to have to hand)&lt;/li&gt;
&lt;li&gt;Regulate the 5V of the LCD board to 3.3V for the ESP8266&lt;/li&gt;
&lt;li&gt;Use I2C to communicate between the LCD board and the WiFi board&lt;/li&gt;
&lt;li&gt;Have an onboard LED for debug&lt;/li&gt;
&lt;li&gt;Have a switch to control booting the ESP8266 into programming mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The schematic is pretty simple. So simple that I never bothered checking it properly and initially forgot the pull-ups on the I2C lines. Woops! Here's the fixed version:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="schamtic" src="http://icchalmers.github.io/images/Week13/schematic.png" title="I2C lines need pull-ups to give them big guns" /&gt;&lt;/p&gt;
&lt;p&gt;The layout is a nice simple one-sided board. Note that pin 2 of the voltage regulator is both pin 2 and the tab, so they are internally connected. I couldn't figure out how to tell KiCAD that this was the case so just ignored the DRC error of the net not being connected.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="layout" src="http://icchalmers.github.io/images/Week13/layout.png" title="I'm 99% positive this version will work" /&gt;&lt;/p&gt;
&lt;p&gt;My initial tests with the board kept giving me I2C errors and it was at this point I realised I had forgotten the pull-ups on the I2C lines. Instead of cutting a new board I managed to jerry-rig some resistors onto the non-functional board.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="WiFiModule" src="http://icchalmers.github.io/images/Week13/WiFiModule.jpg" title="One of these days I'll get a board right first time" /&gt;&lt;/p&gt;
&lt;h2&gt;The Software: ESP8266&lt;/h2&gt;
&lt;p&gt;I wanted to program the ESP8266 directly but couldn't face setting up the SDK. As luck would have it, an &lt;a href="https://github.com/esp8266/Arduino"&gt;Arduino IDE port for the ESP8266&lt;/a&gt; had just been released. &lt;strong&gt;Beware&lt;/strong&gt; that I found release 1.6.1 had problems with the I2C implementation so I had to build the IDE from source. Since I got started, it's been made even easier to add ESP8266 support to the Arduino IDE using the new &lt;a href="https://learn.adafruit.com/add-boards-arduino-v164"&gt;Board Manager&lt;/a&gt;. I've not tried this though, so no promises!&lt;/p&gt;
&lt;p&gt;There's nothing particularly exciting in the actual code. I used the &lt;em&gt;ESP8266WiFi/WiFiWebServer&lt;/em&gt; example as a starting point. HTTP requests to the ESP8266 cause different behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://server_ip/LED/on&lt;/code&gt; turns the LED on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://server_ip/LED/off&lt;/code&gt; turns the LED off&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://server_ip/Line1/{some string}&lt;/code&gt; writes &lt;code&gt;{some string}&lt;/code&gt; to Line1 of the LCD&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://server_ip/Line2/{some string}&lt;/code&gt; writes &lt;code&gt;{some string}&lt;/code&gt; to Line2 of the LCD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each case, an appropriate HTTP response is sent to the user browser. For example, typing &lt;code&gt;http://server_ip/Line1/Hello world!&lt;/code&gt; in a browser (with &lt;code&gt;server_ip&lt;/code&gt; replaced by the IP of the ESP8266) will return the message &lt;code&gt;Wrote [Hello world!] to Line1&lt;/code&gt; if the I2C write was successful or &lt;code&gt;Bad I2C write!&lt;/code&gt; if there was an error. It's worth noting that you can't send spaces in an HTTP URL - they get converted to &lt;code&gt;%20&lt;/code&gt;. The ESP8266 searches for this string and replaces it with a space. This might be browser specific (I use Chrome) - I haven't tested any other browser to check!&lt;/p&gt;
&lt;h2&gt;The Software: PSoC 4 LCD Board&lt;/h2&gt;
&lt;p&gt;The code I posted for Outputs week for the LCD board was extremely basic - it just wrote a message to the LCD and didn't actually implement the I2C/UART/SPI interface I envisaged for writing to the display.&lt;/p&gt;
&lt;p&gt;To talk to the ES8266 I decided to use an I2C interface, with the PSoC acting as a slave. I used the &lt;a href="http://www.cypress.com/?rID=48917"&gt;EZI2C component&lt;/a&gt; in PSoC creator, which sets up hardware I2C that acts like a common I2C EEPROM.&lt;/p&gt;
&lt;p&gt;My "protocol" for writing to the LCD is rudimentary for now. The procedure for the master to write to the LCD is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write to I2C address (the default is &lt;code&gt;0x08&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the memory address to write to. The first 100 bytes are for Line 1 and the second 100 bytes for Line 2. i.e. use &lt;code&gt;0x00&lt;/code&gt; to write to Line 1 or &lt;code&gt;0x64&lt;/code&gt; to write to Line 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the zero-terminated string you want to display on the LCD&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For now, short messages are automatically padded with spaces so that the screen is cleared on each write. Messages that are longer than 100 bytes get chopped. Although messages over 16 characters are accepted, only the first 16 are shown on the display. In the future I might extend the software to have longer messages scroll.&lt;/p&gt;
&lt;h2&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;The current implementation is pretty basic, but still shows the overall workflow for WiFi and I2C (which is all that's really necessary for this week). Here's the screen in action, although you'll just have to trust me that this actually functions and isn't just an elaborate scam.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="wirelessScreen" src="http://icchalmers.github.io/images/Week13/wirelessScreen.jpg" title="I'm a trustworthy guy. Honest." /&gt;&lt;/p&gt;
&lt;p&gt;The generic hardware has a lot of potential. One nice idea I have for the setup would be to have the ESP8266 access the web API for the software we use for booking out the machines in our lab. That way a display could be used to show the upcoming bookings for each machines.&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;I flat out admit that the code isn't exactly what I would call pretty (especially the code for the ESP8266!). It is functional though. If any potential future employer could pretend the code below doesn't exist, that would be great.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://icchalmers.github.io/binaries/WiFiLCD.ino"&gt;WiFiLCD.ino&lt;/a&gt;:&lt;/strong&gt; the ESP8266 Arduino based sketch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://icchalmers.github.io/binaries/wk13_LCDModule_I2C.zip"&gt;wk13_LCDModule_I2C.zip&lt;/a&gt;:&lt;/strong&gt; the updated PSoC creator files for adding I2C to the board from Outputs week&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://icchalmers.github.io/binaries/wk13_WiFiModule_PCB.zip"&gt;wk13_WiFiModule_PCB.zip&lt;/a&gt;:&lt;/strong&gt; the KiCAD design files for the WiFi board&lt;/li&gt;
&lt;/ul&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 12: Composites</title><link href="http://icchalmers.github.io/week-12-composites.html" rel="alternate"></link><updated>2015-04-22T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-04-22:week-12-composites.html</id><summary type="html">&lt;h2&gt;This Week's Assignment&lt;/h2&gt;
&lt;p&gt;The assignment this week was to make a 3D mould and use it to make a fibre composite part.&lt;/p&gt;
&lt;p&gt;I've not been looking forward to this week due to a chronic lack of inspiration.&lt;/p&gt;
&lt;p&gt;Of all the past Composite week pages I have looked at, the only really cool one I've seen is &lt;a href="http://fab.cba.mit.edu/classes/863.12/people/calisch/10/skin.html"&gt;Sam Calisch's boat&lt;/a&gt;. That, however, was a little beyond what I hoped to achieve.&lt;/p&gt;
&lt;p&gt;I decided to keep things simple and use burlap and epoxy. I cheated for this week and waited to watch the review before I started. Right at the last moment, &lt;a href="http://fabacademy.org/archives/2015/eu/students/haldin.anders/week12.html"&gt;Anders Haldin spoke about making a frisbee&lt;/a&gt;. I like Ultimate so figured I might as well do the same.&lt;/p&gt;
&lt;p&gt;Oh, and as an aside, Frisbee is a brand name. I'm not making a Frisbee. I'm making a "&lt;em&gt;flying disc&lt;/em&gt;".&lt;/p&gt;
&lt;h2&gt;Technique Testing: Two Part Moulds&lt;/h2&gt;
&lt;p&gt;I started out doing a simple test piece, or "coupon" as Neil likes to call it. I cut out 5 pieces of burlap by hand, mixed the epoxy (we had &lt;a href="http://www.mbfg.co.uk/epoxy-resins/axson-rsf816.html"&gt;Axson 816&lt;/a&gt; in the lab) and just used two pieces of wax as my "mould". I forgot to grab some clamps from the workshop before it got locked up for the night so I had to improvise some weight.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="heavyTower" src="http://icchalmers.github.io/images/Week12/heavyTower.jpg" title="Jenga anyone?" /&gt;&lt;/p&gt;
&lt;p&gt;I used &lt;a href="http://www.mbfg.co.uk/release-wax-agents/meguiars-mirrorglaze-8.html"&gt;Meguiars Mirror Glaze #8&lt;/a&gt; as my release agent. I never actually read the instructions though and just slapped on one coat. It turns out you're supposed to do at least three and buff in between each. The result of my laziness was some of the wax sticking to the epoxy. Harmless, but not the best for aesthetics.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="testCoupon" src="http://icchalmers.github.io/images/Week12/testCoupon.jpg" title="Jenga anyone?" /&gt;&lt;/p&gt;
&lt;p&gt;The piece was pretty strong and the surface finish on both faces was OK. The edges were a mess but I hadn't tried to be neat with them.&lt;/p&gt;
&lt;h2&gt;Technique Testing: Vacuum Bagging&lt;/h2&gt;
&lt;p&gt;Next up I wanted to test the vacuum bagging technique. Instead of doing another flat coupon, I thought I might as well try something disc shaped. The easiest thing to use as a mould was...a disc!&lt;/p&gt;
&lt;p&gt;Since vacuum forming typically gives a better finish on the mould side, I opted to use the disc as a female mould i.e. make my composite inside the disc. I wanted my disc to be as close to 175g as possible, as that's the "official" weight of the discs used in tournaments. My previous coupon had been 5 layers with a surface area of 180mm x 80mm, and weighed 66g. Doing some back-of-the-envelope calculations, I figured that a 5 layer disc would end up weighing a rather heft 325g. Since my disc didn't need to be all that strong, I opted to reduce the number of layers of burlap to three. This gave me an estimated weight of 195g. Since vacuum bagging typically uses slightly less epoxy than the two layer mould method, I figured I was going to be pretty close to my 175g target.&lt;/p&gt;
&lt;p&gt;I cut the burlap on the laser (50/90/500 on our 40W Epilog Mini). To avoid folds I added some slits to the outer rim. No fancy modelling and surface unfolding - I just did it roughly by eye. The inside of the disc was treated with the wax release (properly this time) and I used cling film with some manual holes added as my bleed layer.&lt;/p&gt;
&lt;p&gt;My original plan was to use an old towel as the breather layer, but according to the &lt;a href="http://www.westsystem.com/ss/assets/HowTo-Publications/Vacuum-Bagging-Techniques.pdf"&gt;link on the class website&lt;/a&gt;, burlap can be used as a breather. Instead of wasting a towel, I just used some scrap burlap I had from when I was testing the laser settings.&lt;/p&gt;
&lt;p&gt;After the layup was complete it was into a cheapo vacuum bag from Asda. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="vacuumBag" src="http://icchalmers.github.io/images/Week12/vacuumBag.jpg" title="This week sucks" /&gt;&lt;/p&gt;
&lt;p&gt;I was a little worried that the holes in my cling film were too big and that the breather layer would become so saturated with epoxy that it would be inseparable. 16 hours and a bit of brute force later, and I was left with my disc-in-a-disc.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="discInADisc" src="http://icchalmers.github.io/images/Week12/discInADisc.jpg" title="Inception disc" /&gt;&lt;/p&gt;
&lt;p&gt;Due to the slight lip on the disc it was quite a challenge getting the composite out. With the aid of a chisel, I managed to get the part out unscathed.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="roughtTestDisc" src="http://icchalmers.github.io/images/Week12/roughTestDisc.jpg" title="How pretty" /&gt;&lt;/p&gt;
&lt;p&gt;It was a waste of time trying to get the cling film bleed layer off. It just wasn't going to happen. The edges needed some pretty serious clean up too, so I used a Gerbil cutter to trim them off. I did some final sanding of the edges with a Dremel and was left with my finished test disc.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finishedTestDisc" src="http://icchalmers.github.io/images/Week12/finalTestDisc.jpg" title="100% unapproved by every Ultimate governing body ever" /&gt;&lt;/p&gt;
&lt;p&gt;I was reasonably happy with the outer surface finish, but the edges were quite variable in thickness due to the overlaps in the burlap. It was also clear that I hadn't exactly done the best job spreading the epoxy evenly, especially around the edges. I did, however, do pretty damn well with my weight estimates. Final weight came in at 172g. Pretty much spot on!&lt;/p&gt;
&lt;p&gt;I've not had a chance to try throwing it yet. I can already tell the rim is a little on the shallow side but I guess this was just a tester after all.&lt;/p&gt;
&lt;h2&gt;What's Next?!&lt;/h2&gt;
&lt;p&gt;Based on my experiments I think I'll get the best result from a two-part mould approach. That should give me a good finish on both surfaces. I'll also give the final disc a vinyl decal and clear coat to finish it off. My main obstacle is that we don't have a large format CNC machine. Instead of trying to make a multi-part jigsaw style mould, I'll probably scale things down and make a disc golf disc instead.&lt;/p&gt;
&lt;p&gt;I'm still pretty uninspired though, so I'll have to come back to this when there are less exciting things to do.&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 11: Outputs</title><link href="http://icchalmers.github.io/week-11-outputs.html" rel="alternate"></link><updated>2015-04-15T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-04-15:week-11-outputs.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;Once again the requirements for this week were very broad: add an output to a board that you designed and program it to do something.&lt;/p&gt;
&lt;p&gt;I decided to make a board that acts as a shield for a 16x2 character LCD display. My overall experimentation goals for this week were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a character LCD to a new board (the bare minimum requirement)&lt;/li&gt;
&lt;li&gt;Try doing a double sided PCB on the Denford PCB Engraver&lt;/li&gt;
&lt;li&gt;Program a blank (i.e. no bootloader present) PSoC 4 chip&lt;/li&gt;
&lt;li&gt;Get a debugger working for the PSoC 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="workingBoard" src="http://icchalmers.github.io/images/Week11/workingBoard.jpg" title="And a great big hello to you too!" /&gt;&lt;/p&gt;
&lt;h2&gt;What Does It Do?&lt;/h2&gt;
&lt;p&gt;I often find myself working on projects where I want to display variables on a screen while I'm developing, but don't want to have to dedicate 7 pins to an LCD. I almost always have a UART, I2C or SPI bus in a project though. I also find that many character LCD displays have a set working voltage (e.g. 5V or 3.3V), but my projects tend to have variable voltage supplies depending on what I'm making. &lt;/p&gt;
&lt;p&gt;With that in mind, I wanted my board for this week to have the following functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow writing data to a character LCD display using either UART, SPI or I2C&lt;/li&gt;
&lt;li&gt;Allow communication from 1.8V to 5.5V&lt;/li&gt;
&lt;li&gt;Allow display of standard variable types (e.g. int, float etc) when only their raw bits are sent to the board.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last requirement is my way of getting rid of bloated &lt;em&gt;printf()&lt;/em&gt; functionality from boards I'm working on. Instead, I can just send the variable directly across the bus and have the display board do the string conversion.&lt;/p&gt;
&lt;h2&gt;Designing The Board&lt;/h2&gt;
&lt;p&gt;Here's the schematic for the board:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="schematic" src="http://icchalmers.github.io/images/Week11/schematic.png" title="I'm getting pretty good at designing schematic symbols now" /&gt;&lt;/p&gt;
&lt;p&gt;A couple of parts are worth talking about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Designed to run off USB power directly at 5V&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are two ways to control the contrast of the display:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the 0Ω resistor (or solder jumper) R3 to use the voltage divider consisting of R1 and R2 to set the contrast. The 100kΩ and 1kΩ values were copied from Neil's LCD board.&lt;/li&gt;
&lt;li&gt;Add the 0Ω resistor R4 to connect P1.7 of the PSoC to the contrast pin of the LCD. The idea was to use PWM to control the contrast in software. I had no idea if this would work, hence the jumper connections.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The PSoC 4 can be set to use LVTTL levels for inputs. That means that an input as low as 2V gets counted as logic HIGH. That's pretty nifty for getting the communication buses to work at a range of voltage levels, as it means I only have to shift the voltage of signals generated by the PSoC 4 (assuming that the source board Vdd is not higher than the display board running at Vusb). Each protocol needs voltage translation handled slightly differently:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I2C uses pull-up resistors to hold the lines high. That means as long as the pull-ups are tied to the source board voltage, the display board can be an I2C slave with no extra components necessary. I2C gets a dedicated header on the display board.&lt;/li&gt;
&lt;li&gt;SPI Slave/UART only need voltage translation on MISO/Tx. I'm using the same &lt;a href="http://www.ti.com/product/SN74LVC1T45/description"&gt;SN74LVC1T45 chip&lt;/a&gt; as I used on the &lt;a href="http://icchalmers.github.io/bonus-content-week-75-designing-a-psoc-4-breakout-board.html"&gt;PSoC Breakout Board&lt;/a&gt; to do the translation. SPI and UART share a header.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I broke out P1.1 and P1.2 to be used as jumpers for configuring settings. The original intent was to use them to configure the I2C address of the board but I might have to use one of them to select if the board is in UART or SPI mode. In hindsight I should have added a switch for that...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Board Layout&lt;/h2&gt;
&lt;p&gt;I started out trying to do a single layer design but it was a nightmare. As luck would have it, we had a delivery of some double sided FR1 that was almost exactly the size I wanted the final board to be. Instead of driving myself insane trying to do a single layer board, I took the opportunity to try and do a double sided PCB on the Denford.&lt;/p&gt;
&lt;p&gt;Here's the final layout. Note that this is the &lt;em&gt;fixed&lt;/em&gt; version. More on that later...&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finalLayout" src="http://icchalmers.github.io/images/Week11/finalLayout.png" title="If only I cut this version..." /&gt;&lt;/p&gt;
&lt;p&gt;The big vias on the left hand side of the board are registration markers I added to help me flip the board to cut on both sides.&lt;/p&gt;
&lt;h2&gt;Making The Board&lt;/h2&gt;
&lt;p&gt;I exported my Gerbers from KiCAD into the Denford software. As before, I had to hand edit the drill file (I really should get round to writing a script for that...). I also added some fake tool changes into the final GCode so that I could give the motor a rest. I started out by milling and drilling the top of the board. Milling used a 1/64th bit and drill holes used a 1mm bit.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="topCut" src="http://icchalmers.github.io/images/Week11/topCut.jpg" title="What do you mean the machines needs a break?! I'm I doing to have to start paying it minimum wage soon too?!" /&gt;&lt;/p&gt;
&lt;p&gt;To get a good registration for the second side I mirrored the bottom Gerber in the Denford software and then extracted the GCode for the drill holes for the registration vias into a separate job. I ran the registration hole job with just the sacrificial layer of FR1 (without changing the origin from the first job) and then used some pins to align the flipped board.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pinAlignment" src="http://icchalmers.github.io/images/Week11/pinAlignment.jpg" title="If only I cut this version..." /&gt;&lt;/p&gt;
&lt;p&gt;The 1mm drill holes had a bit of slop with the pins I used but the alignment between the layers ended up being pretty good. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="bottomAlignment" src="http://icchalmers.github.io/images/Week11/bottomAlignment.jpg" title="If only I cut this version..." /&gt;&lt;/p&gt;
&lt;p&gt;It's by no means perfect (you can see that some of the holes aren't completely surrounded by copper) but certainly functional.&lt;/p&gt;
&lt;p&gt;Feeling like things were going a little too well, equilibrium was soon restored when I started soldering the board.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="USBMistake" src="http://icchalmers.github.io/images/Week11/USBMistake.jpg" title="What the #$@&amp;amp;%*!" /&gt;&lt;/p&gt;
&lt;p&gt;Yup, I had managed to put the USB header on so that it faced into the board. D'oh! As you can see in the picture, I had even printed out my circuit before hand so that I could check the footprint I had made for the PSoC 4 chip. Lesson learnt? &lt;em&gt;Print out your layout and place&lt;/em&gt; &lt;strong&gt;ALL&lt;/strong&gt; &lt;em&gt;the parts on it to make sure everything is sensible!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Instead of cutting a new board, I flipped the header, cut the now reversed power traces and used my god-like soldering abilities to attach some jumper wires.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="jumperFix" src="http://icchalmers.github.io/images/Week11/jumperFix.jpg" title="BOW BEFORE YOUR SOLDER GOD" /&gt;&lt;/p&gt;
&lt;p&gt;After checking the fix with a DMM, I soldered the rest of the components. Since the vias between layers obviously aren't plated, I just soldered some pins in them to make the connections.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="solderedBoard" src="http://icchalmers.github.io/images/Week11/solderedBoard.jpg" title="I wish we had a pick and place machine" /&gt;&lt;/p&gt;
&lt;p&gt;It was now time to cross everything and try to program the board...&lt;/p&gt;
&lt;h2&gt;Programming The Board&lt;/h2&gt;
&lt;p&gt;Since I had used a blank PSoC 4 chip, it didn't have a bootloader. I had two options for programming:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.cypress.com/?id=4&amp;amp;rID=98796"&gt;Use a CY8CKIT-049 42xx to program another PSoC4&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use the KitProg from my &lt;a href="http://www.cypress.com/?rID=102636&amp;amp;source=psoc4ble"&gt;CY8CKIT-042-BLE Bluetooth Low Energy (BLE) Pioneer Kit&lt;/a&gt;, which has the added benefit of having debug capabilities (hallelujah!).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I threw together a quick program in PSoC Creator to flash the LED I had added to the board, because that's the universally accepted method of proving a new embedded design workflow. I hooked the board up to the programming pins on the Pioneer kit, said a quick prayer and...&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="programError" src="http://icchalmers.github.io/images/Week11/programError.png" title="Call yourself a god?!" /&gt;&lt;/p&gt;
&lt;h2&gt;#$@&amp;amp;%*! (AKA Debug Time)&lt;/h2&gt;
&lt;p&gt;My first thought was that the programmer on the Pioneer BLE kit was locked to only work with PSoC 4 BLE chips, but I connected it to one of the CY8CKIT-049 4200 prototyping kits and had an LED blinking in no time. Hmmm...better check the supply voltages next.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BINGO!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that my god like soldering was slightly more human after all. In the process of soldering the jumper wires I had managed to rip up the trace going to the via in the top left of the board (the one that takes GND to the chip). A quick solder rework later and I had a custom PSoC 4 board with a flashing LED that I could program &lt;strong&gt;AND DEBUG&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Hard bit over it was time to get the LCD running.&lt;/p&gt;
&lt;h2&gt;Hello World!&lt;/h2&gt;
&lt;p&gt;I added the &lt;em&gt;CharLCD&lt;/em&gt; component to my design (essentially adding a nice library to my program), specified the port the LCD was on and programmed the board.&lt;/p&gt;
&lt;p&gt;Nothing. &lt;strong&gt;Again&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I was a little suspicious of the 100kΩ and 1kΩ resistor divider Neil had used (the datasheet for the display stated a variable resister of around 10kΩ). To check, I wired a 10K potentiometer on a breadboard, connected it to Vo of the LCD and tried again.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="firstHelloWorld" src="http://icchalmers.github.io/images/Week11/firstHelloWorld.jpg" title="This was a pretty emotional greeting" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SUCCESS!!&lt;/strong&gt; I went back and checked my board and it turns out I had soldered the 100kΩ and 1kΩ resistors in the wrong places (essentially tying the contrast to almost 5V and therefore not showing anything on the screen). I took the chance to try connecting the contrast to the PSoC PWM and found that I actually got the best contrast when I just tied the &lt;em&gt;Vo&lt;/em&gt; pin of the LCD to ground. Over engineering FTW.&lt;/p&gt;
&lt;p&gt;So there we have it, a basic proof of concept. I didn't have time to implement the UART/SPI/I2C component of the design yet, but I can probably count that as part of Networking week.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="workingBoard" src="http://icchalmers.github.io/images/Week11/workingBoard.jpg" title="Hello and, by this point, night night" /&gt;&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;I'll turn this into a GitHub if it becomes something useful people might actually want to use.&lt;/p&gt;
&lt;p&gt;For now though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/wk11_Outputs_PCB.zip"&gt;Here&lt;/a&gt; are the KiCAD PCB files&lt;/li&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/wk11_Outputs_code.zip"&gt;Here&lt;/a&gt; is the PSoC Creator project&lt;/li&gt;
&lt;/ul&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 10: Inputs</title><link href="http://icchalmers.github.io/week-10-inputs.html" rel="alternate"></link><updated>2015-04-08T00:00:00+01:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-04-08:week-10-inputs.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The requirements for this week were very broad: add a sensor to a board you designed and measure it.&lt;/p&gt;
&lt;p&gt;Although Neil was keen for us to make a whole new set of boards, I haven't had a chance to actually use my &lt;a href="http://icchalmers.github.io/bonus-content-week-75-designing-a-psoc-4-breakout-board.html"&gt;PSoC 4 Breakout Board&lt;/a&gt; yet so I'll be using it. I'll be experimenting with two inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Capacitive buttons, using the inbuilt CapSense functionality of the PSoC 4&lt;/li&gt;
&lt;li&gt;Temperature, using the I2C based &lt;a href="http://www.ti.com/product/tmp275"&gt;TMP275 temperature sensor&lt;/a&gt; from Texas Instruments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a video of the final program running on the board.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Ggi41C0hhA8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;What's It Going To Do?&lt;/h2&gt;
&lt;p&gt;My idea was pretty simple. In one state, I wanted to have a rainbow pattern running on the LEDs and be able to change the speed of the pattern using the capacitive buttons. In another state, I wanted to visualise the current temperature on the LEDS. The maximum and minimum temperatures would be continuously updated and the LEDs would shift from blue to red based on the current temperature relative to the historic range.&lt;/p&gt;
&lt;p&gt;To start with, I wrote mini proof-of-concept programs for each of the two states. I then integrated them using a mini state machine.&lt;/p&gt;
&lt;h2&gt;Capacitive Buttons&lt;/h2&gt;
&lt;p&gt;During the design of the breakout board, I read through the two Cypress application notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cypress.com/?docID=50002"&gt;AN64846 - Getting Started with Capsense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cypress.com/?rID=78578&amp;amp;source=an79953"&gt;AN85951 - PSoC 4 CapSense Design Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's quite a bit of overlap between the two. A large chunk of both documents deals with PCB layout and advanced component settings. The PSoC Creator example projects give a better starting point for the software design. There are no examples for CapSense buttons but the &lt;em&gt;CapSense_CSD_P4_Design&lt;/em&gt; example project gives the basic bare bones of how to use the CapSense component. I started a new project with the aim of turning on an LED while one of the buttons was pressed.&lt;/p&gt;
&lt;p&gt;It worked. First time. Flawlessly. &lt;/p&gt;
&lt;p&gt;I was pretty surprised. I had thought I was going to do all kinds of manual tuning to get the buttons to work, but the SmartSense auto tuning seemed to take care of it all. &lt;/p&gt;
&lt;p&gt;One big downside to the capacitive buttons is that you essentially have to poll them. I think they would work great in an RTOS based system but it's OK using them in an OS free program as long as you take care about the update rates. I did notice that button presses while in the temperature sensing state were a bit unresponsive, which was almost certainly due to the 250ms delay in the function.&lt;/p&gt;
&lt;p&gt;I made a little function to handle updating the button state, just to keep the code more readable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CapSense_Update&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;CapSense_UpdateEnabledBaselines&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;CapSense_ScanEnabledWidgets&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CapSense_IsBusy&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my design, the &lt;code&gt;CapSense_Update()&lt;/code&gt; function gets called before each state gets handled. Using some handy macros, I can then check the state of each capacitive button and react accordingly. &lt;/p&gt;
&lt;h2&gt;TMP275 Temperature Sensor&lt;/h2&gt;
&lt;p&gt;I want to have a temperature sensor inside the word clock so that if things start getting a bit too hot I can reduce the brightness. Lower brightness means less current which means less heat, hopefully resulting in a longer life for the LEDs.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.ti.com/product/tmp275"&gt;TMP275&lt;/a&gt; is a digital sensor. Instead of reading an analogue voltage and then translating the voltage level to a temperature (as would be required for the sensors that are in the Fab inventory), the chip performs the conversion and stores the result in memory. The memory of the chip, which controls parameters such as conversion accuracy and the last temperature measurement, can then be accessed on an I2C bus. You can have multiple slaves on a single bus, all controlled by one master. In this case the temperature sensor is the slave and the PSoC is the master. The I2C bus means that you can communicate to multiple different devices using only 2 pins (plus ground).&lt;/p&gt;
&lt;p&gt;I went with the TMP275 simply because I had some free samples from TI. ±0.5°C with 12 bits of resolution is way more accurate than I actually need! The &lt;a href="http://www.ti.com/product/tmp75b/description"&gt;TMP75B&lt;/a&gt; would be cheaper and work just fine. I'm pretty sure they're code and pin compatible (but don't quote me on that!) so if I ever need to make a lot of boards I should be able to simply swap in the cheaper part.&lt;/p&gt;
&lt;p&gt;My code for handling the temperature sensor is all pretty self explanatory. One nifty trick I'll talk about is using a &lt;a href="http://en.wikipedia.org/wiki/Union_type"&gt;union&lt;/a&gt; to store the temperature read from the sensor. A union basically allows you to access the same space in memory while treating it as different variable types. Here's my union definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;TMP275_temperature&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int16_t&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;TMP275_TEMPERATURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This basically makes a new variable type called &lt;code&gt;TMP275_TMPERATURE&lt;/code&gt;. Any variable declared as a &lt;code&gt;TMP275_TMPERATURE&lt;/code&gt; can be accessed in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As an array of two unsigned 8-bit bytes&lt;/li&gt;
&lt;li&gt;As a single signed 16-bit integer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a few reasons to do this. The first is that the I2C memory reads are done as 8-bit bytes at a time and the TMP275 returns either 9 or 12 bits of data i.e. two I2C reads are needed. The second is that the top 8 bits of the data returned by the TMP275 are whole degrees, and the remaining bits are fractions of a degree. &lt;/p&gt;
&lt;p&gt;The benefit is easier to see with an example. Instead of doing something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tempUnits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I2C_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemperatureUnits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;tempFraction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I2C_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemperatureFraction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempUnits&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tempFraction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we can instead do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;currentTemperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I2C_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemperatureUnits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;currentTmperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I2C_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemperatureFraction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this is pseudocode, not actual code!&lt;/p&gt;
&lt;p&gt;First off, we've saved having to make some temporary variables and then do some bit shifts and masks to end up with our 16-bit value. Second, we now have the benefit of accessing the temperature as just the whole part, just the fractional part or as a full 16-bit value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wholeDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentTemperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;fractionsOfADegree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentTemperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;maxTemperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentTemperature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think that's pretty nifty. One word of caution: make sure you know the &lt;a href="http://en.wikipedia.org/wiki/Endianness"&gt;endianness&lt;/a&gt; of the processor you want to compile unions for. Otherwise you can get yourself into a pretty horrible mess! The PSoC 4 is little-endian, so the least significant byte is stored in the smallest address.&lt;/p&gt;
&lt;h2&gt;State Machines in C&lt;/h2&gt;
&lt;p&gt;I've never actually written a &lt;a href="http://en.wikipedia.org/wiki/Finite-state_machine"&gt;state machine&lt;/a&gt; in C before - I've only ever implemented one on an FPGA in Verilog/VHDL. I based my implementation on &lt;a href="http://codeandlife.com/2013/10/06/tutorial-state-machines-with-c-callbacks/"&gt;this great article by Joonas Pihlajamaa&lt;/a&gt; about implementing state machines using function pointers. In my case the state machine is a bit trivial (it only has two states after all!) but writing it in this way makes it quite easy to expand and add more states later. &lt;/p&gt;
&lt;p&gt;To give you an idea of the flexibility, here is all of the code in my &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;stateFunction&lt;/span&gt; &lt;span class="n"&gt;currentState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State_Rainbow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;CapSense_Update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;currentState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stateFunction&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic idea is that you have a function for each of the states you want. In my case, these are &lt;code&gt;State_Rainbow()&lt;/code&gt; and &lt;code&gt;State_Temperature()&lt;/code&gt;. Each of these functions performs the actions associated with that state e.g. the &lt;code&gt;State_Rainbow()&lt;/code&gt; function updates the rainbow pattern on the LEDs. When a state is finished, it returns a pointer to the next state. &lt;/p&gt;
&lt;p&gt;Ideally I would have liked to abstract out the state transitions to be a separate function. That would make complex state machines easier to debug, adapt and maintain. However, that was definitely going above and beyond what was necessary for this week!&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;No GitHub this week. You can get a zip of PSoC Creator project &lt;a href="http://icchalmers.github.io/binaries/wk10_Inputs.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 9: Casting And Moulding</title><link href="http://icchalmers.github.io/week-9-casting-and-moulding.html" rel="alternate"></link><updated>2015-03-25T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-03-25:week-9-casting-and-moulding.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to design a 3D mould, machine it, cast a negative mould from it and then use the mould to cast parts. I've never done any moulding or casting before so decided to keep it simple and aim for a one-piece mould with simple materials. Here's the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finalOutcome" src="http://icchalmers.github.io/images/Week9/plasterLizardsTiled.jpg" title="Cast ALL the lizards!" /&gt;&lt;/p&gt;
&lt;h2&gt;Designing The Mould&lt;/h2&gt;
&lt;p&gt;I wanted to design a part that was simple and took advantage of the main benefit of casting: one mould can make lots of parts quickly. We regularly use a simple &lt;a href="http://en.wikipedia.org/wiki/Reptiles_(M._C._Escher)"&gt;Escher Lizard&lt;/a&gt; design to demonstrate cutting acrylic on the laser cutter and I figured it would be a good part for casting. The shape only needs a one-part mould and the tiling effect gets cooler the more lizards you make.&lt;/p&gt;
&lt;p&gt;Instead of messing about trying to make my own version of the Escher Lizard, I just used &lt;a href="http://www.thingiverse.com/thing:737178"&gt;_nikola's Escher Lizard Improved redesign on Thingiverse&lt;/a&gt;. I imported the stl file into Inventor and used the &lt;a href="https://apps.exchange.autodesk.com/INVNTOR/en/Detail/Index?id=appstore.exchange.autodesk.com:meshenabler:en"&gt;Mesh Enabler&lt;/a&gt; plugin to convert it into a solid base feature. From there I could use it just like a part I had designed myself in Inventor.&lt;/p&gt;
&lt;h2&gt;Testing The Mould Design&lt;/h2&gt;
&lt;p&gt;I used the Roland MDX-20 with machinable wax to make my positive mould. I fixed the wax to the machine bed using strong double sided tape and used a 4mm slot mill to make the wax flat relative to the tool bit. To mill the positive, I experimented with two different bits: a 3mm bit and a 1mm bit, both bull nosed. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="millingBits" src="http://icchalmers.github.io/images/Week9/millingBits.jpg" title="And I didn't break a single bit" /&gt;&lt;/p&gt;
&lt;p&gt;I would have liked to try a flat bit too but we didn't have any that fit the Modela. We only had slot mills, not end mills (i.e. they couldn't be used to plunge) and I wasn't sure how easy it would be to restrict the toolpath to only enter from an edge rather than plunge.&lt;/p&gt;
&lt;p&gt;To start with, I tried using only the 3mm bit for both the roughing pass and the finishing pass. The rough pass took 27m and the finishing pass took 1h15m. Using only the 1mm bit, the roughing pass took 43m and the finishing pass took 1h9m. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="rough1mmCut" src="http://icchalmers.github.io/images/Week9/rough1mmCut.jpg" title="Ignore the random hole" /&gt;&lt;/p&gt;
&lt;p&gt;The lizard on the left has had both a roughing and a finishing pass using the 3mm bit. The lizard on the right has had the roughing pass using the 1mm bit, but is yet to have the finishing pass. I actually thought that the finish on the 3mm lizard was pretty good. Unfortunately the bit was too big to mill the entire lizard (it missed a bit between the right arm and leg), and because of the round end the base of the lizard wasn't totally square (which would cause problems when it came to fitting the lizards together).&lt;/p&gt;
&lt;p&gt;I also did a test part that included walls around the lizard for containing the silicone. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="waxBox" src="http://icchalmers.github.io/images/Week9/waxBox.jpg" title="A smaller part that took longer to machine? No thanks" /&gt;&lt;/p&gt;
&lt;p&gt;Ultimately, this added some extra restrictions on the design: the cutting shaft on the 1mm bit was only 10.7mm so that defined the maximum height of my walls. If I wanted a 5mm thick base on my silicone mould, that only left about 6mm max for the lizards. On top of that, the 3mm roughing cut took about 60% longer than the simple design (and for a lizard that was only about half the size!). &lt;/p&gt;
&lt;p&gt;Overall, I decided that the best plan of action for my final positive mould was to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do a rough pass with the 3mm bit&lt;/li&gt;
&lt;li&gt;do a finishing  pass with the 1mm bit&lt;/li&gt;
&lt;li&gt;forget about having wax walls and just cut a box out of plywood on the laser &lt;/li&gt;
&lt;li&gt;to save time casting final parts, make multiple negative moulds in the same piece of silicone&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Machining The Final Positive&lt;/h2&gt;
&lt;p&gt;I settled on a lizard size that I liked and figured I could fit three on a single block of wax. Although I could have fit at least 9 on the bed size of the Modela, I didn't have a suitably sized piece of wax to hand and the machining time would have been excessive.&lt;/p&gt;
&lt;p&gt;I imported the lizard STL into Inventor and made it into a part. I then made an assembly that included three of the lizards on a common base that matched the top face of the wax block. I  exported the resulting solid as an stl and imported it into Modela Player 4.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="3mmDraft" src="http://icchalmers.github.io/images/Week9/3mmDraft.png" title="Yet another terrible UI" /&gt;&lt;/p&gt;
&lt;p&gt;The UI of Modela Player is a bit rubbish, but it's (mostly) intuitive. Just remember that setting the origin point of your wax isn't part of the wizard workflow. The one very nice feature is that you can essentially print preview the job and see what the final part will look like.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="3mmDraft_preview" src="http://icchalmers.github.io/images/Week9/3mmDraft_preview.png" title="That's over 1km of travel!" /&gt;&lt;/p&gt;
&lt;p&gt;The image above is for the roughing pass using the 3mm bit, and the estimate of 2h13m was pretty much spot on. Doing the same for the finishing pass using the 1mm bit gave this:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="1mmFine_preview" src="http://icchalmers.github.io/images/Week9/1mmFine_preview.png" title="Good thing no one else uses the Modela" /&gt;&lt;/p&gt;
&lt;p&gt;Eesh, seven and a half hours! It was frustrating that I didn't really need the finishing pass on all sections of the design, only really around the edges of the lizards. I was tempted to try using &lt;a href="http://cam.autodesk.com/inventor-hsm/"&gt;Inventor HSM&lt;/a&gt; to create a better toolpaths (there is a post processor for the Modela RML format &lt;a href="http://camforum.autodesk.com/index.php?topic=1918.0"&gt;here&lt;/a&gt;), but decided I didn't have time to experiment with another piece of software this week.&lt;/p&gt;
&lt;p&gt;Here's a close up of one of the lizards after the finishing pass (and a quick run under the tap to remove excess wax chips).&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="roughEdges" src="http://icchalmers.github.io/images/Week9/roughEdges.jpg" title="My camera makes the wax look slightly radioactive" /&gt;&lt;/p&gt;
&lt;p&gt;Because Modela Player generates the finishing pass as an XY scan over the part (with varying Z), the vertical edges had quite a rough finish. In the picture above you can see some scrap wax that hasn't been properly removed (on the leg at the left). In the image below, you can see the faint line where the roughing pass stepped down. The roughing pass did an outline of the lizard, and produced quite a nice edge. The vertical cuts of the finishing pass can clearly be seen at the base of the lizard.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finalWaxVerticalDetail" src="http://icchalmers.github.io/images/Week9/finalWaxVerticalDetail.jpg" title="Bad toolpath = bad result" /&gt;&lt;/p&gt;
&lt;p&gt;Overall I think the limitations were with Modela Player more than anything else. Next time I'll try the Fab Modules or Inventor HSM for making the toolpaths.&lt;/p&gt;
&lt;h2&gt;Casting The Negative Mould&lt;/h2&gt;
&lt;p&gt;With my wax positive finished, it was time to cast a silicone negative. I cut a bounding box out of scrap 3mm plywood on the laser and taped the wax block in using masking tape.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="boxedPositive" src="http://icchalmers.github.io/images/Week9/boxedPositive.jpg" title="Will the silicone leak? Only one way to find out!" /&gt;&lt;/p&gt;
&lt;p&gt;The silicone I was using was &lt;a href="http://www.mbfg.co.uk/rtv-silicone/gp-3481-f.html"&gt;Polycraft GP-3481-F&lt;/a&gt;. It came as a two part solution with a mix ratio of 10:1. I didn't do a particularly good job of mixing the two together and managed to introduce a &lt;strong&gt;LOT&lt;/strong&gt; of bubbles. With no access to a vacuum chamber, I improvised:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="debubbleMixedSilicone" src="http://icchalmers.github.io/images/Week9/debubbleMixedSilicone.jpg" title="I'm pickin' up good vibrations" /&gt;&lt;/p&gt;
&lt;p&gt;That's the air assist for the laser cutter turned on it's side and being used as a makeshift vibration table. It didn't manage to get all the bubbles out, but it did get them off the faces of the lizard parts and that's all that really mattered.&lt;/p&gt;
&lt;p&gt;24 hours later and some quick edge cleaning with a craft knife, I had a pretty serviceable silicone mould to start casting parts with.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finalMoulds" src="http://icchalmers.github.io/images/Week9/finalMoulds.jpg" title="Optimistic and pessimistic lizards" /&gt;&lt;/p&gt;
&lt;h2&gt;Casting Plaster Lizards&lt;/h2&gt;
&lt;p&gt;To test the mould I started with simple plaster, specifically &lt;a href="http://www.mbfg.co.uk/casting-plaster/fine-casting-plaster-plus.html"&gt;Polycraft Formula Fine Casting Plaster Plus&lt;/a&gt;, because it's super cheap.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plasterPacket" src="http://icchalmers.github.io/images/Week9/plasterPacket.jpg" title="I wonder how many lizards I could make if I used it all?" /&gt;&lt;/p&gt;
&lt;p&gt;I mixed the plaster using the ratio implied on the box, which stated &lt;em&gt;"Water to Plaster Ratio (by weight) is 100:70"&lt;/em&gt;. I thought that it was a bit odd to have more water than plaster but decided to go with it.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="firstPlasterLizards" src="http://icchalmers.github.io/images/Week9/firstPlasterLizards.jpg" title="'This plaster is too thin!' said Goldilocks" /&gt;&lt;/p&gt;
&lt;p&gt;The plaster was way too thin and took forever to cure. As you can see in the picture above, I ended up only getting one of the three lizards out in tact. Instead of 100:70, I experimented a bit and found that a ratio of 1:1 by weight gave much better results (both in terms of consistency and setting time). I have since looked at the website for the plaster where it states that it's actually  100 parts plaster to 70 parts water... Damn that stupid label! &lt;/p&gt;
&lt;p&gt;I set about casting lots of lizards.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="castingPlasterLizards" src="http://icchalmers.github.io/images/Week9/castingPlasterLizards.jpg" title="'This plaster is just right!'" /&gt;&lt;/p&gt;
&lt;p&gt;With the 1:1 ratio, I was still only managing to get 2 out of 3 lizards out of the mould without breaking off any limbs. By the time it came to trying to fit all the lizards together, I mas only keeping about 1 in 3 lizards in tact. It's a shame these lizards aren't the type that can grow back missing body parts.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plasterLizardsTiled" src="http://icchalmers.github.io/images/Week9/plasterLizardsTiled.jpg" title="Lizards can grow their limbs back anyway" /&gt;&lt;/p&gt;
&lt;p&gt;If I was going to stick with plaster, I would increase the size of the lizards and tweak the model a bit to remove sharp edges. As it was, I had wilfully ignored the mill diameter/corner routing problem (round mills can't make sharp internal angles). The result was that the very fine points like on the tail had to be pushed with a bit of force into the slightly rounded recess between another lizard's arm and leg. Plaster + force = broken lizards.&lt;/p&gt;
&lt;h2&gt;Casting Plastic Lizards&lt;/h2&gt;
&lt;p&gt;With the plaster only being marginally successful, I decided to try casting some plastic lizards using the same mould. I used &lt;a href="http://www.polytek.com/products/liquid-castingmold-shell-plastics-foams/polyurethane-liquid-casting-plastics/pourablebrushable-polyurethane-plastics/easyflo-series/easyflo-60/"&gt;EasyFlo 60 Liquid Plastic&lt;/a&gt;. It was pretty easy to work with, even if I did have to do it outside (for ventilation) and the working time once mixed was only two and a half minutes!&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="rawPlasticLizards" src="http://icchalmers.github.io/images/Week9/rawPlasticLizards.jpg" title="Nothing a little plastic surgery can't fix *ba doom boom tch*" /&gt;&lt;/p&gt;
&lt;p&gt;The little plastic skirts around the base of the resulting lizards was easy to take off with a fingernail/craft knife. The plastic was &lt;strong&gt;significantly&lt;/strong&gt; stronger than the plaster and all three of the lizards I cast came out perfectly. They had a bit of give in them too, so it was easy to snap them together.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="plasticLizardTiles" src="http://icchalmers.github.io/images/Week9/plasticLizardTiles.jpg" title="No broken legs this time" /&gt;&lt;/p&gt;
&lt;p&gt;I only cast three, but it would be cool to cast a lot more. I might try experimenting with adding a pigment to the plastic too.&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I might have kept it simple this week, but I certainly learned a lot. As with most of the Fab Academy topics, one week is nowhere near long enough to really get to grips with a new process. Some final thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designing a mould for even a simple part takes a lot of thought&lt;/li&gt;
&lt;li&gt;Keep your final material in mind when designing the mould&lt;/li&gt;
&lt;li&gt;Having a vacuum chamber would make things much easier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It didn't arrive in time for this week, but I've ordered some food safe silicone so that I can try casting some chocolate. I might even get cocky and try a multi-part mould too. Time dependent, I might write up any successes in another "bonus" post. &lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/ThreeLizardsMould.stl"&gt;Here&lt;/a&gt; is the stl of the 3 lizard mould&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No GitHub necessary this week!&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 8: Computer Controlled Machining (AKA Make Something Big)</title><link href="http://icchalmers.github.io/week-8-computer-controlled-machining-aka-make-something-big.html" rel="alternate"></link><updated>2015-03-18T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-03-18:week-8-computer-controlled-machining-aka-make-something-big.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to "make something big" (e.g. a piece of furniture) on a large format CNC machine.&lt;/p&gt;
&lt;p&gt;Our lab doesn't have it's own large CNC machine, so we used one at &lt;a href="http://www.maklab.co.uk/cnc-router-cutting/"&gt;MakLab&lt;/a&gt;. I found myself in need of a new desk, so decided to make one for this assignment. Here's the final result:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finalTable" src="http://icchalmers.github.io/images/Week8/finalTable.jpg" title="Not, not the tiny one, the big one" /&gt;&lt;/p&gt;
&lt;h2&gt;Desk Design&lt;/h2&gt;
&lt;p&gt;This was my existing home workbench setup.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="currentSituation" src="http://icchalmers.github.io/images/Week8/currentSituation.jpg" title="Sorry David" /&gt;&lt;/p&gt;
&lt;p&gt;That desk on the left is my kitchen table. I told my flatmate I needed to take it from the kitchen "just for a few days". That was three months ago...&lt;/p&gt;
&lt;p&gt;I looked for inspiration on the excellent &lt;a href="https://www.opendesk.cc/"&gt;OpenDesk&lt;/a&gt;. Having never made a desk before, I was worried about designing something from scratch without having first hand knowledge of the material properties and design principals. To reduce the chances of failure I decided to take one of the existing designs on OpenDesk and modify it to fit my needs.&lt;/p&gt;
&lt;p&gt;I settled on the &lt;a href="https://www.opendesk.cc/atfab/one-to-several-table"&gt;AtFAB One-To-Several Table&lt;/a&gt;. I liked the design, and it had additional resources available above and beyond the other desks on OpenDesk. For example, there was the &lt;a href="http://filson-rohrbacher.com/portfolio/autoprogettazione/"&gt;Autoprogettazione&lt;/a&gt; app for paramterising the desk. Unfortunately, you can't actually export the results so it's kind of useless...&lt;/p&gt;
&lt;p&gt;Instead, I remodelled the entire design (parametrically) in Inventor. Here's what I ended up with.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="deskModel" src="http://icchalmers.github.io/images/Week8/deskModel.jpg" title="Making it in these colours would probably have been nicer than the OSB" /&gt;&lt;/p&gt;
&lt;p&gt;The base desk is pretty much an exact copy of the  One-To-Several Table. I then added a shelf to support my PC monitor and speakers. My reasoning was that even if my shelf design failed miserably, I would still be left with a usable desk!&lt;/p&gt;
&lt;p&gt;To verify that my Inventor model was accurate I cut a scaled version in 3mm plywood on the laser cutter. My target material for the desk was 18mm ply, so I scaled all the dimensions down by a factor of 6.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="miniTable" src="http://icchalmers.github.io/images/Week8/miniTable.jpg" title="Curse you, tiny table!" /&gt;&lt;/p&gt;
&lt;p&gt;The shelf design uses pocket cuts to hold the supports, which I couldn't reproduce on the laser. Overall though the design looked like it was going to work pretty well.&lt;/p&gt;
&lt;h2&gt;Cutting The Desk&lt;/h2&gt;
&lt;p&gt;We went down to MakLab to use one of their three large format CNC machines (the lucky sods!). I imported my parts into V-Carve and defined the cut paths based on using a 1/4" upcut bit.&lt;/p&gt;
&lt;p&gt;We had a bit of an unfortunate mix up in ordering 18mm plywood (it was going to be delivered too late), so I had to use what MakLab had on hand. That ended up being one sheet of 18mm OSB and one sheet of 18mm MDF. Not the nicest of materials to work with but needs must. I went with the MDF for making the shelf and desk top and used the much rougher OSB for the desk frame and structure. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cuttingOSB" src="http://icchalmers.github.io/images/Week8/cuttingOSB.jpg" title="MakLab has three of these. THREE!" /&gt;
&lt;img alt="wasteOSB" src="http://icchalmers.github.io/images/Week8/wasteOSB.jpg" title="Not the best use/waste ratio" /&gt;&lt;/p&gt;
&lt;p&gt;Cutting the OSB took about 50 minutes, and cutting the MDF (which had some extra parts from my classmate on it too) also took about 50 minutes. We loaded up the car with all of our parts and got them back to FabLab@Strathclyde.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cutPieces" src="http://icchalmers.github.io/images/Week8/cutPieces.jpg" title="LET THE MISERY COMMENCE!" /&gt;&lt;/p&gt;
&lt;p&gt;I thought about trying to hide the fact that the table was made of OSB and MDF by painting it but figured it would be hard to get a convincing finish. Instead, I went down the complete opposite route and decided to flaunt the "homemade" look by varnishing everything.&lt;/p&gt;
&lt;p&gt;I grew to regret this decision, because it meant a &lt;strong&gt;lot&lt;/strong&gt; of sanding and varnishing. Here's a before and after shot after the first round of sanding:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="beforeSanding" src="http://icchalmers.github.io/images/Week8/beforeSanding.jpg" title="ugly" /&gt;
&lt;img alt="afterSanding" src="http://icchalmers.github.io/images/Week8/afterSanding.jpg" title="slightly less ugly" /&gt;&lt;/p&gt;
&lt;p&gt;To get a "good" finish on the OSB I had to do one sanding session with a powered sander, then a layer of varnish, followed by hand sanding and another coat of varnish and then &lt;strong&gt;another&lt;/strong&gt; hand sand and varnish and then a final hand sand! Overall it probably took me about two full days to get an OK finish on the OSB. If I charged for my time, I would now own one of the cheapest looking expensive desks in the world.&lt;/p&gt;
&lt;p&gt;With the help of a persuasion device (i.e. a hammer), I assembled the desk and used a drill to make the pilot holes for screwing everything together. Here's the desk in it's new home.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finalTable" src="http://icchalmers.github.io/images/Week8/installedTable.jpg" title="It didn't stay that tidy for long" /&gt;&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;My full file set is way too big for the archive, so I'm only uploading a subset of files here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here are &lt;a href="http://icchalmers.github.io/binaries/DeskSheet1_Tops.dxf"&gt;Sheet1&lt;/a&gt; and &lt;a href="http://icchalmers.github.io/binaries/DeskSheet2_Legs.dxf"&gt;Sheet2&lt;/a&gt; in DXF format.&lt;/li&gt;
&lt;li&gt;Get all the files (and the most up to date ones!) on &lt;a href="https://github.com/icchalmers/FabAcademy2015_MakeSomethingBig"&gt;my GitHub&lt;/a&gt;. &lt;strong&gt;This is the option you want!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="weekly classes"></category></entry><entry><title>Bonus Content! Week 7.5: Designing a PSoC 4 Breakout Board</title><link href="http://icchalmers.github.io/bonus-content-week-75-designing-a-psoc-4-breakout-board.html" rel="alternate"></link><updated>2015-03-12T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-03-12:bonus-content-week-75-designing-a-psoc-4-breakout-board.html</id><summary type="html">&lt;h2&gt;Four Birds, One Stone&lt;/h2&gt;
&lt;p&gt;For &lt;a href="http://icchalmers.github.io/week-7-embedded-programming.html"&gt;Week7: Embedded Programming&lt;/a&gt; I decided to work with the super cheap &lt;a href="http://www.cypress.com/?rID=92146"&gt;PSoC 4 CY8CKIT-049 4200 prototyping kit&lt;/a&gt;. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="CY8CKit" src="http://icchalmers.github.io/images/Week7/CY8CKit.jpg" title="source: http://www.cypress.com/?rID=92146" /&gt;&lt;/p&gt;
&lt;p&gt;The kit itself is pretty sparse (it basically has an LED and a button), so I designed a breakout board/shield with some more interesting bits and bobs on it to play with.&lt;/p&gt;
&lt;p&gt;Thinking ahead to upcoming assignments, I figured I could make a breakout board that should have me covered for a number of weeks. The features I wanted were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WS2812 LEDs:&lt;/strong&gt; You can read more about these nifty little RGB LEDs in &lt;a href="http://icchalmers.github.io/week-6-electronic-design.html"&gt;last weeks post&lt;/a&gt;. In particular I wanted to try driving them using the UDBs of the PSoC 4, and they should cover me for "outputs" week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ESP8266:&lt;/strong&gt; The &lt;a href="http://www.esp8266.com/"&gt;ESP8266&lt;/a&gt; is a relatively new device that got makers all hot and bothered when it showed up some time last year. It's basically a super cheap chip/microcontroller for adding WiFi to projects. I picked up a few of the &lt;a href="http://hackerspace.pbworks.com/w/page/88183850/ESP8266"&gt;ESP-01 modules&lt;/a&gt; from &lt;a href="http://www.aliexpress.com/item/Free-Shipping-2pcs-lot-ESP8266-remote-serial-Port-WIFI-wireless-module-through-walls-Wang-ESP-11/32217368130.html"&gt;AliExpress&lt;/a&gt; for less than £2 each. I plan on using a few of them as part of "networking" week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Temperature Sensing:&lt;/strong&gt; I had a few &lt;a href="http://www.ti.com/product/tmp275"&gt;TMP275&lt;/a&gt; chips from TI lying about. It's a temperature sensor that works over I2C and has an accuracy of 0.5°C. It should cover me for "inputs" week, and I plan on using one in the Word Clock to keep a track on the heat dissipation of the LEDs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Capacitive Touch Buttons:&lt;/strong&gt; Again, these should cover me for "inputs" week, and I plan on adding some to the clock/table too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So that's Embedded Programming, Inputs, Outputs and Networking all (hopefully) covered using one board.&lt;/p&gt;
&lt;h2&gt;Picking A Power Supply&lt;/h2&gt;
&lt;p&gt;Because most of the devices I planned on adding only worked up to 3.6V, I decided to just run everything at 3.3V (except the LEDs). That meant adding a beefy 3.3V regulator. The ESP8266 can draw a few hundred milliamps so I went with an &lt;a href="http://www.ti.com/product/lp38691"&gt;LP38691&lt;/a&gt; from TI that I had on hand (3.3V, 500mA, easy capacitor requirements). Power is supplied from a standard USB-mini header (and directly sent as 5V to the LEDs). &lt;/p&gt;
&lt;h2&gt;The Schematic&lt;/h2&gt;
&lt;p&gt;Here's the schematic:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="schematic_untested" src="http://icchalmers.github.io/images/Week7/schematic_untested.png" title="I had to make most of the parts by hand :(" /&gt;&lt;/p&gt;
&lt;p&gt;With the LEDs running at 5V, a 3.3V signal is slightly too low to be reliable as a logic high (5 * 0.7 = 3.5V minimum, based on the &lt;a href="http://www.adafruit.com/datasheets/WS2812B.pdf"&gt;datasheet&lt;/a&gt;). Although I have used a 3.3V data input in the past, I've seen reports of it causing the occasional error in the LED data stream. There are a number of ways to step up the voltage, but many of them seem to be incapable of handling the data rate. Jez on happyinmotion.com has a fantastic &lt;a href="http://happyinmotion.com/?p=1247"&gt;article comparing different level shifters with WS2812 LEDs&lt;/a&gt;. I didn't have any of the mentioned chips on hand, but I did have a couple of &lt;a href="http://www.ti.com/product/SN74LVC1T45/description"&gt;SN74LVC1T45&lt;/a&gt; chips. If you ask TI nicely, they'll send you some free samples. I'm yet to check the signal quality on a scope but the LEDs seem to work fine with it (which is not surprising, seeing at it's rated at 410Mbps and the LEDs work at two orders of magnitude less than that!).&lt;/p&gt;
&lt;h2&gt;Board Layout&lt;/h2&gt;
&lt;p&gt;Schematic complete, I moved onto the board layout.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="breakoutBoard" src="http://icchalmers.github.io/images/Week7/breakoutBoard.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Capacitor C12 (10μF) and resistor R2 (10kΩ) can probably be omitted. The capacitor is just to help with the bursty power draw of the WiFi module. The resistor is just a pull-up for the CH_PD pin (chip power-down). 10kΩ is probably a little excessive for a 3.3V pull up but it's an easy value that's in the inventory. I've seen mixed comments online about whether it's really needed or not too. Better to have a place for it and not need it, than need it and not have a place for it.&lt;/p&gt;
&lt;p&gt;Also, note that I didn't &lt;em&gt;quite&lt;/em&gt; manage to get a completely single layer layout. A jumper wire is needed to connect the LED ground to the USB ground. It might have been possible to use the multiple ground pins of the dev kit as a sneaky way of accessing ground elsewhere (like I did with the ground of the WiFi module) but I was reluctant to route the possibly high(ish) currents of the LEDs through the dev kit. A jumper wire from the small landing strip at the bottom right of the LEDs to the tab of the regulator was the quickest and simplest solution.&lt;/p&gt;
&lt;h2&gt;A Slight Hiccup&lt;/h2&gt;
&lt;p&gt;Our PCB engraver was out of commission for a few days so as a temporary measure I set up an equivalent circuit on a breadboard. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="breadboard" src="http://icchalmers.github.io/images/Week7/breadboard.jpg" title="Neil won't like this at all..." /&gt;&lt;/p&gt;
&lt;p&gt;Neil might hate breadboards and think that they're useless but in my opinion they're just another tool. Yes, they can become a mess of wires. Yes, the capacitance between tracks is pretty massive. But, for quick prototyping with low-frequency signals (by that I mean analogue signals &amp;lt; 1MHz and digital &amp;lt; 8MHz-ish), they can be a really useful tool. The breadboard worked perfectly and meant I could work on the software while waiting for the PCB engraver to get fixed.&lt;/p&gt;
&lt;h2&gt;Back On Track - Cutting The PCB&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I'm currently in the process of writing a full tutorial on using the Denford. It will probably only be useful to people in our lab, but I'll link to it here when it's ready.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our lab technician Lindsey lay her healing hand on the Denford PCB Engraver and everything was fixed. Now I could ditch the breadboard and get a PCB cut.&lt;/p&gt;
&lt;p&gt;I opened the Denford PCB Engrave software and imported the gerber for the board. Even though the board passed a design rule check with a clearance of 0.4mm (the diameter of the bit I was using), the Denford software warned of a possible isolation problem.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="breadboard" src="http://icchalmers.github.io/images/Week7/possibleProblemHighlighted.png" title="If only the software added those markers" /&gt;&lt;/p&gt;
&lt;p&gt;Frustratingly, the software doesn't say &lt;em&gt;where&lt;/em&gt; the isolation problem might be. I added those nice red circles myself, after scrolling around all the tool paths to see where the isolation issues were. The problem area was around the SOT23-6 package for the SN74LVC1T45 level shifter. Even though the cutter wouldn't pass through the gap, I figured that the diameter of the tool was enough that the copper would still get cut. Thankfully, this turned out to be the case.&lt;/p&gt;
&lt;p&gt;Once again, I had to modify the KiCad drill file to be compatible with the Denford software. The resulting preview shows that the drill hits are all the in the right place.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="handFixedDrillFile" src="http://icchalmers.github.io/images/Week7/handFixedDrillFile.png" title="Still faster to hand edit the drill file than to drill the holes by hand" /&gt;&lt;/p&gt;
&lt;p&gt;Some milling and drilling later, I had a pretty nice looking PCB. The image below was taken before I even de-burred or washed the board. With the PCB cut, it was time to stuff and solder.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="postCut" src="http://icchalmers.github.io/images/Week7/postCut.jpg" title="No post processing whatsoever" /&gt;&lt;/p&gt;
&lt;h2&gt;Experimenting With A Kapton Solder Paste Mask&lt;/h2&gt;
&lt;p&gt;I took the opportunity to try a new method of applying solder paste: laser cutting a stencil out of Kapton. I taped a sheet of Kapton to some sacrificial plywood I had kicking about (although in hindsight, acrylic might have caused less burning around the edges). After playing around with the laser settings (I found that 70/17/5000 worked well for our 40W Epilog) I exported the solder mask from KiCad as an SVG and imported it into CorelDRAW. A grand total of 32 seconds on the laser later, I had a solder mask.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="weedingKapton" src="http://icchalmers.github.io/images/Week7/weedingKapton.jpg" title="Also good for making tiny confetti" /&gt;&lt;/p&gt;
&lt;p&gt;It took a while to remove all the tiny cut-outs, but even the really close cuts like on the pins of the USB connector held their shape really well. The next step was to secure the stencil over the PCB. I just used some masking tape.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pasteApplied" src="http://icchalmers.github.io/images/Week7/pasteApplied.jpg" title="A better spreader would have helped" /&gt;&lt;/p&gt;
&lt;p&gt;I used an old card as a spreader, and tried to keep the paste as even as possible. I think I could have got a better result by securing the stencil on the same "level" as the PCB. By that I mean use some spare copper clad around the edges of the PCB and stick the masking tape to that, instead of straight to the table. If you look closely in the picture, you can see that the edges of the PCB caused the stencil to bulge slightly in the middle. This resulted in the paste in those areas not having quite as consistent a height or defined outline as the pads near the edges of the board.&lt;/p&gt;
&lt;p&gt;Once the paste was as even as I could get it, I carefully removed the stencil.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="maskRemoved" src="http://icchalmers.github.io/images/Week7/maskRemoved.jpg" title="Much better than using a syringe" /&gt;&lt;/p&gt;
&lt;p&gt;The result was a LOT better than when I tried to apply the paste by hand. The definition around the USB connections wasn't great, but I figured I could clean any bridges up later with a soldering iron. &lt;/p&gt;
&lt;p&gt;Very carefully, I added all the components to the board. The paste is slightly tacky, so it helped to hold the components in place. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="componentsPlaced" src="http://icchalmers.github.io/images/Week7/componentsPlaced.jpg" title="I think I might have OCD when it comes to checking the orientation of components" /&gt;&lt;/p&gt;
&lt;p&gt;I double (and triple) checked that I had all of the components orientated the right way and then gently moved the board to the reflow oven. Because I had had some issues the previous week with not all of the paste reflowing, I used a reflow profile with a slightly higher maximum temperature.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="intoOven" src="http://icchalmers.github.io/images/Week7/intoOven.jpg" title="This board is a more appropriate size compared to last weeks" /&gt;&lt;/p&gt;
&lt;p&gt;Seven minutes later, I had an (almost) perfect board.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="outOfOven" src="http://icchalmers.github.io/images/Week7/outOfOven.jpg" title="Much better than using a syringe" /&gt;&lt;/p&gt;
&lt;p&gt;If you look closely, you can see that the pins of the LEDs and capacitors nearest to the bottom edge still didn't quite reflow properly (the joints are dull, not shiny). I think this was due to the placement of the PCB in relation to the bulbs of the reflow oven. In the future, I'll probably tweak the reflow profile again to try and get a more consistent reflow. As I suspected, the USB connector pins had also bridged. I used the soldering iron to reflow the paste that hadn't quite made it, and then used some solder wick to un-bridge the USB pins. I soldered on the header sockets for the dev kit and ESP-01 by hand too.&lt;/p&gt;
&lt;p&gt;Overall, I think the process went quite well. I probably wouldn't bother doing it for a board with any fewer components on it than this one did though.&lt;/p&gt;
&lt;h2&gt;Programming The Board&lt;/h2&gt;
&lt;p&gt;You can read about how I programmed the board to control the LEDs in the following post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/week-7-embedded-programming.html"&gt;Week7: Embedded Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll add links to posts about the temperature sensor, capacitive touch buttons and the ESP-01 as I write them.&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="color:red"&gt;WARNING!&lt;/span&gt;&lt;/strong&gt; Because the breakout board is designed to work at 3.3V, you &lt;strong&gt;CANNOT USE THE CY8CKIT-049 4200 DEVELOPMENT KIT WITHOUT MODIFICATION&lt;/strong&gt;. Unmodified, the dev kit is powered directly from the 5V VUSB on the USB-UART. There are a few options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unsolder the resettable fuse from the USB-UART (the fat resistor-looking chip between VUSB and R7). This will power everything from the 3.3V regulator. I also used the control panel in the Cypress USB-SDK to tell the USB-UART that it had a 3.3V VUSB, so it could disable it's internal regulator (see all the settings I used below). This is the option I went with. Note that this option only works for a 3.3V supply.&lt;/p&gt;
&lt;p&gt;&lt;p align="center" markdown="1"&gt;
&lt;img alt="USBUARTSettings" src="http://icchalmers.github.io/images/Week7/USBUARTSettings.png" title="I actually don't know if this is necessary, but it definitely didn't hurt!" /&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Snap the USB-UART board from the main dev kit board. When you want to program the dev kit, remove it from the breakout board, connect it to the USB-UART, program it, disconnect the kit from the USB-UART and then plug the dev kit back into the breakout board. I avoided this route as it would have been a massive waste of time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Break the VDD connection between the boards (either by snapping the USB-UART off and not adding a connection pin for it, or by removing the 0Ω resistor on the dev kit) and then add voltage level translation between the USB-UART and the PSoC 4 RX. The other direction (PSoC 4 TX) doesn't need shifted, as the chip on the USB-UART board can be programmed to accept down to 2V as a logic high when powered at 3.3V.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cut a trace on the under side of the USB-UART, after the VUSB pin of the chip is supplied but before and other power pins are supplied. I &lt;em&gt;think&lt;/em&gt; the best place to cut would be on the bottom side of the board, immediately after the via that brings VUSB power to the under side of the board. This would allow the chip to have it's VDD connected to the target device's power so that no voltage translation would be necessary, making it &lt;em&gt;incredibly&lt;/em&gt; flexible as a generic USB to UART/I2C/SPI/CapSense/GPIO. I never tried this as I only had one dev kit on hand and if it was a bit too...&lt;em&gt;permanent&lt;/em&gt; a test considering I wasn't sure it would definitely work or not!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Program the board using the SWI interface and ignore the bootloader entirely. I'm probably going to end up going this route using the PSoC 4 BLE kit I have as the programmer. Partly because it will be useful to have a debugger, but honestly just so that I don't have to bloody power cycle the dev kit while holding the user button in every damn time I want to re-program the board. If you don't have one if the Pioneer kits, you could try &lt;a href="http://www.cypress.com/?id=4&amp;amp;rID=98796"&gt;using one CY8CKIT-049 to program another PSoC4&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you've been warned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/PSoC4_Breakout.zip"&gt;Here&lt;/a&gt; are the KiCad files for the breakout board.&lt;ul&gt;
&lt;li&gt;The board has been verified to work with the LEDs. The temperature sensor, ESP8266 and CapSense features should be considered experimental until I've verified them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual, the files given here might be out of date. The &lt;strong&gt;latest-and-greatest can be found &lt;a href="https://github.com/icchalmers/FabAcademy_PSoC4_Breakout"&gt;on my GitHub&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 7: Embedded Programming</title><link href="http://icchalmers.github.io/week-7-embedded-programming.html" rel="alternate"></link><updated>2015-03-11T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-03-11:week-7-embedded-programming.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to read a microcontroller data sheet and program our &lt;a href="http://icchalmers.github.io/week-6-electronic-design.html"&gt;board from last week&lt;/a&gt; to do something, using as many different programming languages and environments as possible. Here's the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="rainbowLights" src="http://icchalmers.github.io/images/Week7/rainbowLights.jpg" title="Even more pretty lights this week!" /&gt;&lt;/p&gt;
&lt;p&gt;Notice that I'm using a new breakout board/shield I designed. You can read all about that in the post &lt;a href="http://icchalmers.github.io/bonus-content-week-75-designing-a-psoc-4-breakout-board.html"&gt;Bonus Content! Week 7.5: Designing a PSoC 4 Breakout Board&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Picking A Microcontroller&lt;/h2&gt;
&lt;p&gt;I already programmed last weeks board to cycle the LED colour, so I thought I would try something new this week instead...&lt;/p&gt;
&lt;p&gt;Since I have a background in electronics, I've worked with a whole bunch of microcontrollers in the past. From what I remember, I've used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.microchip.com/pagehandler/en-us/products/picmicrocontrollers"&gt;Microchip PICs&lt;/a&gt; - specifically their &lt;a href="http://www.microchip.com/pagehandler/en-us/family/8bit/"&gt;8-bit PIC18F family&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://am.renesas.com/products/mpumcu/m16c/"&gt;Renesas M16C&lt;/a&gt; - I wrote a 300 line assembler VGA driver that's probably some of the most elegant code I have ever written.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt; - very useful due to the massive community. I tend to Arduino for super quick one off projects and for getting up and running fast with new peripherals (because there's usually already a library available).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ti.com/product/tms320c6713"&gt;TI TMS320C6713&lt;/a&gt; - technically a DSP rather than a microcontroller. The &lt;a href="http://c6000.spectrumdigital.com/dsk6713/revc/"&gt;DSK6713 development board&lt;/a&gt; was probably one of the worst dev kits I have ever had the misfortune to use.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freescale.com/webapp/sps/site/prod_summary.jsp?code=FRDM-KL26Z"&gt;Freescale KL26Z&lt;/a&gt; - The FRDM line of development boards from Freescale are really cheap and interesting. This board was my first dabble into ARM Cortex M0 programming. It's a different kettle of fish than 8-bit microcontrollers!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along with the hardware, I've tried all the various vendor IDEs that go with them. In general, any that are based on &lt;a href="https://eclipse.org/"&gt;Eclipse&lt;/a&gt; tend to be OK by me.&lt;/p&gt;
&lt;p&gt;So what to do this week? Well I've been itching to try the &lt;a href="http://www.cypress.com/psoc4/?source=CY-ENG-HEADER"&gt;Cypress PSoC 4&lt;/a&gt; for a while now, so this seemed like an excellent opportunity! &lt;/p&gt;
&lt;h2&gt;Why PSoC 4?&lt;/h2&gt;
&lt;p&gt;The PSoC 4 (Programmable System on Chip) is packed with some really neat features that I wanted to try:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's based on the ARM Cortex M0&lt;/li&gt;
&lt;li&gt;Has programmable analogue e.g. opamps and comparators&lt;/li&gt;
&lt;li&gt;Has programmable digital (UDBs - Universal Digital Blocks)&lt;/li&gt;
&lt;li&gt;Has built in capacitive sensing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's the UDBs that grabbed my attention most. They're kind of like having a tiny CPLD or FPGA built right into the microcontroller. You can even program them in Verilog. I don't tend to work with many analogue signals but the "programmable" analogue is pretty intriguing too! &lt;/p&gt;
&lt;p&gt;I recently bought a &lt;a href="http://www.cypress.com/?rID=102636&amp;amp;source=psoc4ble"&gt;CY8CKIT-042-BLE Bluetooth Low Energy (BLE) Pioneer Kit&lt;/a&gt; (to try PSoC and Bluetooth LE with debugging capabilities), but it's not part of the current &lt;a href="https://docs.google.com/a/chalmers.cc/spreadsheet/pub?key=0AtIlZyLn99e6dGRleUJTY043a3FucUhFUVVBYTdxS3c&amp;amp;single=true&amp;amp;gid=0&amp;amp;output=html"&gt;Fab Lab Inventory&lt;/a&gt;. I also have one of the super cheap &lt;a href="http://www.cypress.com/?rID=92146"&gt;PSoC 4 CY8CKIT-049 4200 prototyping kits&lt;/a&gt;. Since it is part of the standard inventory, I decided I would start with it. Although it doesn't have debugging capabilities, I figured if I got stuck I could hack the debugger from the BLE kit and use that.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="CY8CKit" src="http://icchalmers.github.io/images/Week7/CY8CKit.jpg" title="source: http://www.cypress.com/?rID=92146" /&gt;&lt;/p&gt;
&lt;p&gt;The kit itself is pretty sparse (basically it has an LED and a button), so I designed a breakout board/shield with some more interesting bits and bobs on it to play with. You can read about the design of the board in the separate post &lt;a href="http://icchalmers.github.io/bonus-content-week-75-designing-a-psoc-4-breakout-board.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Controlling WS2812 LEDs with PSoC 4&lt;/h2&gt;
&lt;p&gt;PSoC Creator has two distinct sections for projects: a hardware section and a software section.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;To drive the LEDs, I used the hardware UDBs. The component came from &lt;a href="http://www.element14.com/community/thread/27131/l/psoc-4-pioneer-kit-community-project100-psoc-4-times-square-led-billboard"&gt;Project #100 - PSoC 4 Times Square LED Billboard&lt;/a&gt; which was part of the PSoC 4 &lt;a href="http://www.element14.com/community/thread/23736/l/100-projects-in-100-days?displayFullThread=true"&gt;100 Projects in 100 Days&lt;/a&gt; event on &lt;a href="http://www.element14.com/"&gt;Element14&lt;/a&gt;.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="TopDesign" src="http://icchalmers.github.io/images/Week7/TopDesign.png" title="There's a lot going on under the hood" /&gt;&lt;/p&gt;
&lt;p&gt;The component is a little bloated for what I need. I'm only driving 9 LEDs from once pin, not trying to draw pictures on a massive display board like in the project! Since I have plenty of flash and RAM on the PSoC 4, I didn't bother trying to strip it down. I imagine many of the unused functions get optimised out by the compiler anyway. I'm tempted to change a few things in the component myself at a later date e.g. use a colour order of RGB instead of the very unintuitive BRG!&lt;/p&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;The software side of this test project is quite simple. Here's the main loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;StripLights_1_Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
    &lt;span class="n"&gt;StripLights_1_Dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Dim to 25%&lt;/span&gt;
    &lt;span class="n"&gt;CyGlobalIntEnable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Set the colour of each pixel so that between them all, the entire &lt;/span&gt;
        &lt;span class="c1"&gt;// spectrum of the rainbow is displayed&lt;/span&gt;
        &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;pixelNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pixelNumber&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUMPIXELS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pixelNumber&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;StripLights_1_Pixel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;pixelNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Wheel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;COLOURSTEPSIZE&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;StripLights_1_Ready&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StripLights_1_Trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;CyDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic flow/pseudocode of the code is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialise the WS2812 component&lt;/li&gt;
&lt;li&gt;Loop forever&lt;ol&gt;
&lt;li&gt;Set each pixel to a colour so that all pixel colours are equally spaced on the colour wheel&lt;/li&gt;
&lt;li&gt;Set a new start colour&lt;/li&gt;
&lt;li&gt;Update the LEDs&lt;/li&gt;
&lt;li&gt;Delay to control update speed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;Wheel()&lt;/code&gt; function is my adaptation of the equivalent function from the &lt;a href="https://github.com/adafruit/Adafruit_NeoPixel/blob/master/examples/strandtest/strandtest.ino"&gt;Adafruit NeoPixel Library striptest example&lt;/a&gt;. It simply maps a value of 0 to 255 to a colour on the colour wheel. It's perfect for making pretty rainbow patterns!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Adapted from the NeoPixel library from Adafruit.&lt;/span&gt;
&lt;span class="c1"&gt;// Input a value 0 to 255 to get a color value.&lt;/span&gt;
&lt;span class="c1"&gt;// The colours are a transition r - g - b - back to r.&lt;/span&gt;
&lt;span class="c1"&gt;// Order seems to be BRG for the WS2812 driver&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="nf"&gt;Wheel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;170&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;170&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;WheelPos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My changes were quite superficial. I increased the readability and swapped the colour return order to BRG to match the hardware component.&lt;/p&gt;
&lt;p&gt;And that's it! The result is a pretty rainbow pattern on the LEDs. Getting a picture of them is pretty hard. This picture was taken in a fully lit lab, with the LEDs at 25% brightness and with a diffuser to help reduce the brightness&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="rainbowLights" src="http://icchalmers.github.io/images/Week7/rainbowLights.jpg" title="Unlike a dating site profile, this board looks better in person" /&gt;&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;As usual, there are two places to get the files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/PSoC4_Breakout_WS2812Testing.zip"&gt;Here&lt;/a&gt; is an example PSoC Creator project to make the LEDs flash a pretty rainbow pattern.  These files are probably out of date and are only here to be "in the archive".&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/icchalmers/FabAcademy2015_PSoC4_WS2812Testing"&gt;On my GitHub&lt;/a&gt;. These will be the most up to date. &lt;strong&gt;Get this one.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 6: Electronic Design</title><link href="http://icchalmers.github.io/week-6-electronic-design.html" rel="alternate"></link><updated>2015-03-04T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-03-04:week-6-electronic-design.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to take the &lt;a href="http://academy.cba.mit.edu/classes/embedded_programming/index.html#echo"&gt;echo hello-world board&lt;/a&gt;, add an LED and a button, verify the design and then make it.&lt;/p&gt;
&lt;p&gt;I thought that was a bit boring so decided to make my own board instead. The idea was to make a board to test the WS2812 LEDs that I'll be using in the &lt;a href="http://icchalmers.github.io/final-project-proposals.html"&gt;clock/catan table&lt;/a&gt;. I loosely based the design around the &lt;a href="http://icchalmers.github.io/week-4-electronics-production.html"&gt;FabTiny*&lt;/a&gt;.
This is the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="flashLED" src="http://icchalmers.github.io/images/Week6/flashLED.gif" title="Because it's not a website until it has a gif" /&gt;&lt;/p&gt;
&lt;h2&gt;A New PCB Engraver&lt;/h2&gt;
&lt;p&gt;We have a new toy at Fab Lab Strathclyde. It's a &lt;a href="http://website.denford.ltd.uk/news-menu/117-denford-s-pcb-engraver"&gt;Denford PCB Engraver&lt;/a&gt;.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="DenfordPCBEngraver" src="http://icchalmers.github.io/images/Week6/DenfordPCBEngraver.jpg" title="Ooooh fancy!" /&gt;&lt;/p&gt;
&lt;p&gt;The machine has some pretty nice features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The best feature of the machine is that it has a floating head. That means that the copper board doesn't have to be totally level. Instead, the drill depth is set by adjusting the floating head and the pad around the drill bit "floats" over the board to give a constant depth of cut. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's a &lt;strong&gt;lot&lt;/strong&gt; faster than the Modela.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The spindle can do 20k RPM (as opposed to the 6.5k of the Modela).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It has a range of collet sizes, so it's much easier to find mill bits for. I used a 0.4mm end mill for all the circuits in this write up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It comes with software that take in gerber files directly and spits out a compatible CNC file. No more PNGs!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before making any circuits with the Denford, I ran some simple tests to find the best settings.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="TestCuts" src="http://icchalmers.github.io/images/Week6/TestCuts.jpg" title="Super complex test cuts" /&gt;&lt;/p&gt;
&lt;p&gt;I did a comparison between feed rate, spindle RPM and depth of cut. With the depth set to &lt;strong&gt;just&lt;/strong&gt; cut through the copper and no more, the best RPM was in the 16k to 20k range when combined with a feed rate of about 15%. Although some of the squares cut great with feed rates up to 35%, I found that more complex circuits produced a better result when slowed down. 20% was OK, but 10% would be best for really complex PCBs. Somewhere around 15% gives a good starting point to refine from. I actually think the main limitation was the double sided tape I used to stick the boards down. If the tape was stronger, faster rates would be possible.&lt;/p&gt;
&lt;h2&gt;Helping Out A Friend&lt;/h2&gt;
&lt;p&gt;Coincidentally, a mechanical engineering friend of mine needed some help making a little PCB to combine an XBee with a GPS modules. Since it was a super simple design (two through hole modules and a 5V to 3.3V regulator), I put it together quickly in KiCad and used it to test the Denford on a real circuit. The results were pretty good.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="GPSTraces" src="http://icchalmers.github.io/images/Week6/GPSTraces.jpg" title="It even spot drills the holes for you!" /&gt;
&lt;img alt="GPSThroughHole" src="http://icchalmers.github.io/images/Week6/GPSThroughHole.jpg" title="Even better, forget the spot drill and just drill the holes using the machine!" /&gt;&lt;/p&gt;
&lt;p&gt;The only trouble I had was passing a KiCad drill file to the Denford software. For some reason the Denford software seems to expect the drill file to be in a non-standard &lt;a href="http://web.archive.org/web/20071030075236/http://www.excellon.com/manuals/program.htm"&gt;Excellon format&lt;/a&gt;. However, a bit of playing with the raw files and I managed to convert the KiCad .drl file into something the Denford would accept. This won't be much of an issue for Fab Academy, as basically all of the boards are surface mount anyway.&lt;/p&gt;
&lt;h2&gt;Getting To Grips With KiCad&lt;/h2&gt;
&lt;p&gt;To design the board, I decided to use &lt;a href="http://www.kicad-pcb.org/"&gt;KiCad&lt;/a&gt;. I went with KiCad over Eagle(http://www.cadsoftusa.com/) because a) it's open source and b) it doesn't have any limitations on board size. With the floating head on the Denford, it should be possible to engrave some really large boards without worrying about how flat the copper is.&lt;/p&gt;
&lt;p&gt;In order to take full advantage of all the latest features in KiCad (such as shove routing - thanks CERN!), I built the latest dev release from source using the handy script on the KiCad website. The install wasn't totally without issue (for some reason on Mint 17.1, some of the dependencies were missing, but I just installed them manually) but I got through it easily enough.&lt;/p&gt;
&lt;p&gt;There are definitely a lot of features missing in KiCad, and the user interface is pretty unintuitive. Some of the things I didn't like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Wiring a component in the schematic and then moving it is a &lt;strong&gt;mess&lt;/strong&gt;. I'm used to the wire handling of something like Simulink, and KiCad is rubbish in comparison.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lot of the documentation and tutorials are for the old "stable" release. In a toss up between support and new features, I went with new features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user interface is so unintuitive that I found myself having to seek help for basically every single thing I needed to do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The footprint editor is barebones at best. In fact, all of the drawing tools are pretty shocking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PCBnew (the layout part) seems to have different rendering modes, and the functionality between them is completely different. For example, you have to go into OpenGL mode to use the shove routing feature, but in that mode I found that the ratsnest didn't work...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The newer dev releases use a new format for footprints and schematic libraries and it's a bit all over the place right now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To top it all off, the Fab Library for Eagle isn't 100% compatible. I found I could automatically convert most of the schematic symbols but the footprints failed pretty miserably. Instead, I've just been doing my own footprints for parts as I need them.&lt;/p&gt;
&lt;p&gt;OK, rant over. I'm at the stage with KiCad now that I can be productive, but it really is a fickle beast you need to learn to tame. To be fair, my past experience with Eagle wasn't much better. I feel like a lot of the "current" PCB software is stuck in the 90s somewhere...&lt;/p&gt;
&lt;h2&gt;Designing A WS2812 Test Board&lt;/h2&gt;
&lt;p&gt;The schematic for the board is nothing fancy.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="schematic" src="http://icchalmers.github.io/images/Week6/schematic.png" title="Simples" /&gt;&lt;/p&gt;
&lt;p&gt;If you're not familiar with the WS2812 LEDs, they're a really cool little device. Each LED has it's own built in control circuit, and you can chain multiple LEDs together. You send 24-bits of RGB data to the chip, and it does all the PWM to give you the color you want. So, from one microcontroller pin, you can control &lt;strong&gt;THOUSANDS&lt;/strong&gt; of RGB LEDs individually. Pretty cool.&lt;/p&gt;
&lt;p&gt;Technically each WS2812 is supposed to have it's own 0.1uF decoupling capacitor, but for a single LED and such a small board, I just used one capacitor for both the tiny85 and the LED.&lt;/p&gt;
&lt;p&gt;(On a side note, the only reason I'm using the 6-pin WS2812S and not the better 4-pin WS2812B is that I got sent them by mistake in an order and got to keep them, so I have a hundred of them to use up!)&lt;/p&gt;
&lt;p&gt;I then made/found footprints for all the components, and exported the netlist to PCBnew to layout the board. This is my final layout. You can see the influence of the FabTiny*.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="boardLayout" src="http://icchalmers.github.io/images/Week6/boardLayout.png" title="Doing a layout is like doing a puzzle that makes your brain hurt" /&gt;&lt;/p&gt;
&lt;p&gt;Since I had made a lot of the footprints myself, I first printed the board out to scale and placed the components on it.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="paperMistake" src="http://icchalmers.github.io/images/Week6/paperMistake.jpg" title="Can you spot the error?!" /&gt;&lt;/p&gt;
&lt;p&gt;It was a good thing I did too. I had accidentally managed to assign the wrong pin numbers to the footprint for my button. I fixed the mistake (and made the board a bit smaller in the process) and printed it out again for a final check.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="paperFixed" src="http://icchalmers.github.io/images/Week6/paperFixed.jpg" title="Perfect!" /&gt;&lt;/p&gt;
&lt;h2&gt;Cutting The Board&lt;/h2&gt;
&lt;p&gt;I exported the gerber and brought it into the Denford software. Even though my board passed a design rule check for a clearance of 0.4mm, the Denford software complained it wouldn't be able to isolate all of the traces (probably due to some tiny mismatch in segmentation). Unhelpfully, it doesn't tell you where. You have to scroll around looking for the problem.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="unableToCut" src="http://icchalmers.github.io/images/Week6/unableToCut.png" title="Yup, that tiny corner" /&gt;&lt;/p&gt;
&lt;p&gt;Although the board would probably have been fine, I adjusted the problem parts and regenerated the gerber. I then sent a few boards to the machine with different settings, but in the end all of them would have been usable. Each board took between 5 and 15 minutes depending on the feed rate.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cutBoards" src="http://icchalmers.github.io/images/Week6/cutBoards.jpg" title="I'm never cutting a board on the Modela again" /&gt;&lt;/p&gt;
&lt;p&gt;For such a simple circuit outline, it was much quicker to just cut each board out with a band saw. Some light sanding and a wash later, and it was time to solder a board.&lt;/p&gt;
&lt;h2&gt;Another New Toy&lt;/h2&gt;
&lt;p&gt;I lied when I said we got a new toy. We actually got two: the Denford engraver, and a cheapo Chinese reflow oven. I tried applying the solder paste straight from the fridge using the plastic nozzle it came with, and ended up with a bit of a mess.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pasteOnBoard" src="http://icchalmers.github.io/images/Week6/pasteOnBoard.jpg" title="I was a bit heavy with the lead paste" /&gt;&lt;/p&gt;
&lt;p&gt;For a future week, I'll try laser cutting a solder paste mask from kapton tape. However, for this week I just went ahead and added the components.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="partsOnBoard" src="http://icchalmers.github.io/images/Week6/partsOnBoard.jpg" title="Yeh I could already tell I was going to do some hand rework" /&gt;&lt;/p&gt;
&lt;p&gt;Then it was off into the reflow oven using a profile matched to the paste I was using.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="intoReflowOven" src="http://icchalmers.github.io/images/Week6/intoReflowOven.jpg" title="Into the jaws of hell" /&gt;
&lt;img alt="reflowProfile" src="http://icchalmers.github.io/images/Week6/reflowProfile.jpg" title="First person to use a cheap Chinese machine designed to heat up? Fire extinguisher at the ready..." /&gt;&lt;/p&gt;
&lt;p&gt;On the first reflow attempt, not all of the paste reflowed successfully (probably due to me having &lt;strong&gt;way&lt;/strong&gt; too much on). You can clearly see the paste around the LED hasn't gone nice and shiny.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="firstReflowFail" src="http://icchalmers.github.io/images/Week6/firstReflowFail.jpg" title="Could have done three boards by hand by this point" /&gt;&lt;/p&gt;
&lt;p&gt;I took the easy option and just put the whole lot back in for another bake. A bit risky given how temperamental the WS2812s can be with heat, but I had plenty more if I needed a replacement. All of the paste reflowed after a second bake, but my ham fisted application of the paste had resulted in a few solder bridges on the ATtiny and the LED. They were easy to fix with a soldering iron and some wick though.&lt;/p&gt;
&lt;p&gt;Board soldered, it was time to try programming it.&lt;/p&gt;
&lt;h2&gt;Programming The ATtiny85.&lt;/h2&gt;
&lt;p&gt;To program the board, I decided to flash the Arduino bootloader. The main reason was it meant I could use the &lt;a href="https://github.com/adafruit/Adafruit_NeoPixel"&gt;Adafruit NeoPixel Library&lt;/a&gt; to talk to the WS2812 without writing my own driver.&lt;/p&gt;
&lt;p&gt;To add the ATtiny85 as an option in the Arduino IDE I used the &lt;a href="https://code.google.com/p/arduino-tiny/downloads/detail?name=arduino-tiny-0150-0020.zip"&gt;arduino-tiny core&lt;/a&gt; and used a FabISP to flash the 16MHz internal PLL bootloader. I also had to set some extra udev rules since I'm using Linux Mint. AS220 has &lt;a href="http://academy.cba.mit.edu/content/tutorials/akf/embedded_programming_arduinoIDE.html"&gt;a tutorial&lt;/a&gt; that's dead easy to follow if you're running an Ubuntu based distro too.&lt;/p&gt;
&lt;p&gt;Bootloader flashed, I loaded the basic example from the NeoPixel library. The only changes I made were to the number of LEDs (to 1, obviously) and to the pin the WS2812 was on (it's on pin 2 of the tiny85, but thats actually called pin 3 in the Arduino IDE). I uploaded the sketch and...&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="workingBoard" src="http://icchalmers.github.io/images/Week6/workingBoard.jpg" title="A green light of success!" /&gt;&lt;/p&gt;
&lt;p&gt;Success! The LED lit up green. Some simple tweaks to the sketch and I had it flashing RGB.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="flashLED" src="http://icchalmers.github.io/images/Week6/flashLED.gif" title="Because it's not a website until it has a gif" /&gt;&lt;/p&gt;
&lt;p&gt;My plan for the board is to use it to test out some different samples that Perspex kindly sent me for free. They have a wide range of different acrylics specifically designed for diffusing LEDs, and I need to find the perfect one for making the Catan table. The WS2812s will need the extra diffusion. These guys are &lt;strong&gt;bright&lt;/strong&gt; when on full power! My camera really struggled to capture them, even with a really strong diffuser layer in front.&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;For a change, the files are nice and small this week. You can download them directly from here: &lt;a href="http://icchalmers.github.io/binaries/WS2812S_ATtiny45.zip"&gt;WS2812S_ATtiny45.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, as always, the most up to date files can be found &lt;a href="https://github.com/icchalmers/WS2812S_ATtiny45"&gt;on my github&lt;/a&gt;.&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 5 Part 2: 3D Scanning and Printing</title><link href="http://icchalmers.github.io/week-5-part-2-3d-scanning-and-printing.html" rel="alternate"></link><updated>2015-02-26T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-26:week-5-part-2-3d-scanning-and-printing.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was in two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design and 3D print an object that could not be made subtractively&lt;/li&gt;
&lt;li&gt;3D scan an object, and optionally print it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since the &lt;a href="http://icchalmers.github.io/week-2-computer-aided-design.html"&gt;word clock&lt;/a&gt; model wasn't particularly suited to 3D printing, I decided that I would try scanning, fixing and printing some objects instead.&lt;/p&gt;
&lt;p&gt;This is the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="FinalPrints" src="http://icchalmers.github.io/images/Week5/FinalPrints.jpg" title="Not shown: a lot of waste material" /&gt;&lt;/p&gt;
&lt;p&gt;I'm splitting this weeks documentation into two parts:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; is using the Modela MDX-20 to scan a small broken oven knob and print it. You can see that post in &lt;a href="http://icchalmers.github.io/week-5-part-1-3d-scanning-and-printing.html"&gt;Week 5 Part 1: 3D Scanning and Printing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; is using the &lt;a href="http://cubify.com/products/sense"&gt;Cubify Sense&lt;/a&gt; to scan and print the bust of a person. That's this post.&lt;/p&gt;
&lt;h2&gt;Documentation Coming Soon!&lt;/h2&gt;
&lt;p&gt;I'm behind on documentation as it is, so this is just the images for the moment! Thanks to fellow classmate &lt;a href="http://fabacademy.org/archives/2015/eu/students/cao.jianlin/index.html"&gt;Jianlin Cao&lt;/a&gt; for scanning me, and sorry my scans of you weren't as good! (although I stand by my argument that I just know how to sit still).&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="FirstScanRaw" src="http://icchalmers.github.io/images/Week5/FirstScanRaw.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="FirstScanRaw_vs_fixed" src="http://icchalmers.github.io/images/Week5/FirstScanRaw_vs_Fixed.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="SelfPrintFailed" src="http://icchalmers.github.io/images/Week5/SelfPrintFailed.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="BustOnePrintFail" src="http://icchalmers.github.io/images/Week5/BustOnePrintFail.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="BustOneWithSupports" src="http://icchalmers.github.io/images/Week5/BustOneWithSupports.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="CleanBustOne" src="http://icchalmers.github.io/images/Week5/CleanBustOne.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="SecondScanRaw" src="http://icchalmers.github.io/images/Week5/SecondScanRaw.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="SecondScanRaw_vs_fixed" src="http://icchalmers.github.io/images/Week5/SecondScanRaw_vs_Fixed.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="SecondScanRaw_vs_Fixed_2" src="http://icchalmers.github.io/images/Week5/SecondScanRaw_vs_Fixed_2.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="SecondScanCoolSupports" src="http://icchalmers.github.io/images/Week5/SecondScanCoolSupports.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="creepy" src="http://icchalmers.github.io/images/Week5/creepy.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="BrokenTongueSupport" src="http://icchalmers.github.io/images/Week5/BrokenTongueSupport.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="BustTwoWithSupports" src="http://icchalmers.github.io/images/Week5/BustTwoWithSupports.jpg" title="" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="TwoCleanBusts" src="http://icchalmers.github.io/images/Week5/TwoCleanBusts.jpg" title="" /&gt;&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 5 Part 1: 3D Scanning and Printing</title><link href="http://icchalmers.github.io/week-5-part-1-3d-scanning-and-printing.html" rel="alternate"></link><updated>2015-02-25T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-25:week-5-part-1-3d-scanning-and-printing.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was in two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design and 3D print an object that could not be made subtractively&lt;/li&gt;
&lt;li&gt;3D scan an object, and optionally print it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since the &lt;a href="http://icchalmers.github.io/week-2-computer-aided-design.html"&gt;word clock&lt;/a&gt; model wasn't particularly suited to 3D printing, I decided that I would try scanning, fixing and printing some objects instead.&lt;/p&gt;
&lt;p&gt;This is the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="FinalPrints" src="http://icchalmers.github.io/images/Week5/FinalPrints.jpg" title="Not shown: a lot of waste material" /&gt;&lt;/p&gt;
&lt;p&gt;I'm splitting this weeks documentation into two parts:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; is using the Modela MDX-20 to scan a small broken oven knob and print it. That's this post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; is using the &lt;a href="http://cubify.com/products/sense"&gt;Cubify Sense&lt;/a&gt; to scan and print the bust of a person. You can see that post in &lt;a href="http://icchalmers.github.io/week-5-part-2-3d-scanning-and-printing.html"&gt;Week 5 Part 2: 3D Scanning and Printing&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;But First, A Test Print&lt;/h2&gt;
&lt;p&gt;The first thing I did was download the &lt;a href="http://www.thingiverse.com/thing:636363"&gt;3D Printer Tolerance Test&lt;/a&gt; that Neil mentioned in class. I printed it in PLA on the Replicator 2.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="TestPrintFailure" src="http://icchalmers.github.io/images/Week5/TestPrintFailure.jpg" title="OK so the word 'print' is maybe a bit strong" /&gt;&lt;/p&gt;
&lt;p&gt;Clearly the printer failed that particular test. It looked like the nozzle got clogged, as the printer was still going when I noticed but no plastic was coming out. Even though it failed, it did teach me something: if you have multiple individual parts of an STL, so that it essentially has internal faces, then the printer will respect that. I had assumed that only the outer shell of any model would get printed.&lt;/p&gt;
&lt;p&gt;So a failure, but a useful one. I never bothered trying again. Lots of people in the lab had been having issues with that particular batch of black PLA. Onwards to scanning.&lt;/p&gt;
&lt;h2&gt;Scanning On The Modela&lt;/h2&gt;
&lt;p&gt;The object I wanted to scan was a broken oven knob from my Auntie's oven, with the idea being that I could perhaps print her some new ones. The internal structure is reasonably complex, with some very deep sections that I thought light based scanners would probably struggle with.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="OvenKnobScanningInside" src="http://icchalmers.github.io/images/Week5/OvenKnobScanningInside.jpg" title="Comment" /&gt;&lt;/p&gt;
&lt;p&gt;However, the size and geometry of the knob made it a good candidate for scanning on the Modela. Last year's student James Fletcher has &lt;a href="http://fabacademy.org/archives/2014/students/fletcher.james/week5_group_modela_scan.html"&gt;a pretty good overview on scanning with the Modela&lt;/a&gt; using the Roland Dr PIXZA software.&lt;/p&gt;
&lt;p&gt;I switched the spindle out for the scanning head, and attached the knob to the scanner bed. Since I didn't have any blu tack handy, and the base of the knob wasn't suitable for double sided tape, I once again resorted to hot glue.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="GlueToBed" src="http://icchalmers.github.io/images/Week5/GlueToBed.jpg" title="This glue gun is more fabulous than my one" /&gt;&lt;/p&gt;
&lt;p&gt;After setting the scanning area, these are the main parameters you have to set.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="DrPICZA" src="http://icchalmers.github.io/images/Week5/DrPICZA.png" title="Everyone loves ambiguous user interfaces!" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;X SCAN PITCH&lt;/em&gt; and &lt;em&gt;Y SCAN PITCH&lt;/em&gt; settings are pretty obvious. For my first scan I went with a very fine 0.1mm for both. The setting that tripped me up was &lt;em&gt;Z BOTTOM&lt;/em&gt;. I assumed that the Z limit I was setting was the maximum &lt;strong&gt;height&lt;/strong&gt; of the object. It is, in fact, the maximum &lt;strong&gt;depth&lt;/strong&gt; of the scan, as offset from the base of the scanner. Not knowing this, I set my scan going and left it for the estimated 12 hours it was going to take. I came back to this:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="OvenKnob1" src="http://icchalmers.github.io/images/Week5/OvenKnob1.jpg" title="12 hours well spent if you ask me!" /&gt;&lt;/p&gt;
&lt;p&gt;At first I thought that the point cloud was so dense that I couldn't make anything out. But no. I had just spent 12 hours scanning the air above the oven knob...&lt;/p&gt;
&lt;p&gt;Having learnt from my mistake, I adjusted the &lt;em&gt;Z BOTTOM&lt;/em&gt; value so that I would actually scan the oven knob. Confident it would work, and since I would be leaving it over night anyway, I set the scan resolution to a tiny 0.05mm. 12 hours later I came back, and the scan still had an estimated 80 hours to go...&lt;/p&gt;
&lt;p&gt;The part it had scanned so far looked pretty good though! Being impatient, I killed the scan, set the resolution to a more manageable 0.3mm and 8 hours alter came back to this:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Oven3" src="http://icchalmers.github.io/images/Week5/Oven3.jpg" title="That's actually pretty cool" /&gt;&lt;/p&gt;
&lt;p&gt;After wrestling with the hot glue, I managed to flip the knob over and do a scan of the other side using the same settings.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="OvenKnobFront" src="http://icchalmers.github.io/images/Week5/OvenKnobFront.jpg" title="It took a total of about 40 hours of scanning to get to this point..." /&gt;&lt;/p&gt;
&lt;p&gt;Scans complete, it was time to start playing with the meshes.&lt;/p&gt;
&lt;h2&gt;Combining The Meshes&lt;/h2&gt;
&lt;p&gt;To combine the two meshes into a single object I tried both &lt;a href="http://meshlab.sourceforge.net/"&gt;MeshLab&lt;/a&gt; and &lt;a href="http://www.meshmixer.com/"&gt;MeshMixer&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;MeshLab&lt;/h3&gt;
&lt;p&gt;I imported the STL files into MeshLab and the results looked pretty good from the get go.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="MeshLabFrontInternal" src="http://icchalmers.github.io/images/Week5/MeshLabFrontInternal.jpg" /&gt;
&lt;img alt="MeshLabFront" src="http://icchalmers.github.io/images/Week5/MeshLabFront.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;However, I quickly grew to hate MeshLab. It's clearly a very powerful mesh manipulator, but the user interface is &lt;strong&gt;awful&lt;/strong&gt; and the documentation is sketchy at best. With great power comes great responsibility (to properly document). I quickly got frustrated and tried MeshMixer instead.&lt;/p&gt;
&lt;h3&gt;MeshMixer&lt;/h3&gt;
&lt;p&gt;I found MeshMixer much more intuitive to use. Pretty quickly, I had my two mesh sections lined up and one Boolean Intersect later, I had a completed oven knob.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="BooleanIntersect" src="http://icchalmers.github.io/images/Week5/BooleanIntersect.jpg" title="I won't lie, I lined them up by eye" /&gt;
&lt;img alt="BooleanIntersectResult" src="http://icchalmers.github.io/images/Week5/BooleanIntersectResult.jpg" title="There's no hole there. It's all in your head." /&gt;&lt;/p&gt;
&lt;p&gt;The screen captures from above were from a very quick mess around with the software, hence the small hole. I spent some time playing with the mesh alignment and fixed that before heading to the printer.&lt;/p&gt;
&lt;h2&gt;Printing The Oven Knob&lt;/h2&gt;
&lt;p&gt;Even though the scan of the oven knob was still "broken", I thought it would be cool to try and print it out anyway. I fully expected the print to fail due to the walls being so thin but on this occasion I was pleasantly surprised!&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="OvenKnobPrinting" src="http://icchalmers.github.io/images/Week5/OvenKnobPrinting.jpg" title="What do you mean it hasn't failed yet?!" /&gt;
&lt;img alt="OvenKnobFreshOffPrinter" src="http://icchalmers.github.io/images/Week5/OvenKnobFreshOffPrinter.jpg" title="OK so there are some obvious problems with thickness, but that went surprisingly well!" /&gt;&lt;/p&gt;
&lt;p&gt;There were some obvious issues with the thickness of the print around the bottom, but overall the process went pretty smoothly. I split the print from its raft and started to (very carefully) clean the support structure from the inside of the part.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="OvenKnobPrintedInsideWithSupport" src="http://icchalmers.github.io/images/Week5/OvenKnobPrintedInsideWithSupport.jpg" title="Everyone needs supports at times" /&gt;&lt;/p&gt;
&lt;p&gt;In hindsight, I should have printed the knob upside down so that the supports were on the outside. That would have made them a &lt;strong&gt;lot&lt;/strong&gt; easier to remove.&lt;/p&gt;
&lt;p&gt;So how well does the copy compare?&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="OvenKnobCompareOutsides" src="http://icchalmers.github.io/images/Week5/OvenKnobCompareOutsides.jpg" title="Not cleaning the kitchen must run in the family" /&gt;
&lt;img alt="OvenKnobCompareInsidesOverExposed" src="http://icchalmers.github.io/images/Week5/OvenKnobCompareInsidesOverExposed.jpg" title="If it wasn't for the fact that one was bright orange, they would be indistinguishable!" /&gt;&lt;/p&gt;
&lt;p&gt;The clone is a pretty good match in my opinion. A little more work on the mesh and I think this would have been a really faithful imitation.&lt;/p&gt;
&lt;p&gt;At some point in the future I might try using the mesh as the basis for a new knob that could actually be used on the oven itself. I would essentially fill in the middle part with "solid" plastic, while keeping the bore in the middle for attaching it to the rod that sticks out of the oven. That would probably mean the whole part could be printed without supports, and it would be thicker and more robust to boot.&lt;/p&gt;
&lt;p&gt;But that's for another day. At this point I wanted to get a scan of something more interesting: &lt;strong&gt;me&lt;/strong&gt;. Head over to &lt;a href="http://icchalmers.github.io/week-5-part-2-3d-scanning-and-printing.html"&gt;Week 5 Part 2: 3D Scanning and Printing&lt;/a&gt; to read all about it.&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;The files for this week are pretty large, but Neil said in the lecture we were allowed to host them off site for a change! So, if you for some reason want to print a broken oven knob of your own, you can get the files &lt;a href="https://github.com/icchalmers/FabAcademy2015_3DScanningAndPrinting"&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 4: Electronics Production</title><link href="http://icchalmers.github.io/week-4-electronics-production.html" rel="alternate"></link><updated>2015-02-18T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-18:week-4-electronics-production.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to make a FabISP board. ISP stands for In-circuit Serial Programmer i.e. the device can program chips that are already integrated into their target circuit. The programmer targets Atmel's 8-bit AVR range of microcontrollers such as the ATtiny45 and the ATmega328 found on the Arduino Uno.&lt;/p&gt;
&lt;p&gt;This is the final outcome:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finishedBoardAngle" src="http://icchalmers.github.io/images/Week4/finishedBoardAngle.jpg" title="But it takes a while to get there" /&gt;&lt;/p&gt;
&lt;h2&gt;Choosing A FabISP Design&lt;/h2&gt;
&lt;p&gt;There are a number of variations on the FabISP floating around the internet. All of them are based on Dick Streefland's &lt;a href="http://dicks.home.xs4all.nl/avr/usbtiny/"&gt;USBTiny&lt;/a&gt; code, which implements USB in software on ATtinys.&lt;/p&gt;
&lt;p&gt;From there, the lineage seems to be (roughly), from oldest to newest:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dick Streefland's &lt;a href="http://dicks.home.xs4all.nl/avr/usbtiny/"&gt;USBtiny SPI converter&lt;/a&gt;: This was the first application Dick wrote that used USBtiny.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lady Ada's &lt;a href="https://learn.adafruit.com/usbtinyisp"&gt;USBtinyISP&lt;/a&gt;: Lady Ada made some low level software changes and made it "official" by adding USB VID/PIDs, as well as some hardware changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;David Mellis's &lt;a href="http://fab.cba.mit.edu/content/projects/fabisp/"&gt;FabISP&lt;/a&gt;: David started with the USBtinyISP as a reference but the finished product is almost completely different. He swapped all of the through hole components for SMD ones. I think most (if not all) of the parts are standard in the Fab Lab inventory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Andy Bardagjy's &lt;a href="http://fab.cba.mit.edu/content/projects/fabispkey/index.html"&gt;FabISPkey&lt;/a&gt;: The biggest change Andy made was to swap the USB Mini socket for a PCB based USB plug. He also made a variant designed for targeting lower voltage microcontrollers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Valentin Heun's &lt;a href="http://fab.cba.mit.edu/classes/863.11/people/valentin.heun/2.htm"&gt;FabISP&lt;/a&gt;: Valentin tweaked Andy's layout so that after the initial programming of the ATtiny, a section of the board could be snapped off. This meant no more desoldering of jumper wires and it made if obvious that the USB would not function until the ATtiny had been programmed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zaerc's &lt;a href="http://fablab.waag.org/project/fabtinystar"&gt;FabTinyStar&lt;/a&gt;: AKA the FabTiny*. Version 0.3 "Bas" is the most common variant. This board is a real evolution of the original design. It uses the smaller ATtiny45 in place of the ATtiny44, which has two big advantages. The first is that it's smaller (8 pins vs 14). The second is that with some clever software teaks to calibrate the internal RC oscillator, it can be used without an external crystal. On top of that, the FabTiny* also adds a reset button and a board edge switch for selectively applying power to the target board.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I decided to make the FabTiny*, as it had more features and had an overall more elegant design. I'm not a fan of board edge USB connectors though, as I tend to find them a bit picky about making a good connection. Perhaps I'll make my own variation in the upcoming weeks...&lt;/p&gt;
&lt;p&gt;I followed the &lt;a href="http://fabacademy.org/archives/2015/doc/FabTinyIsp/index.html"&gt;FabTiny* Tutorial&lt;/a&gt; in the class archive.&lt;/p&gt;
&lt;h2&gt;Milling On The Modela&lt;/h2&gt;
&lt;p&gt;I re-milled a new acrylic sacrificial layer for general use on the Modela and then set up two pieces of FR1 (or it might actually be FR2 - we're not sure!). One as a sacrifice, one for milling the actual board.&lt;/p&gt;
&lt;p&gt;I was a little apprehensive about using the Modela. Our lab has always had trouble with the machine, probably due to some issues with the serial cable. The milling job would start out fine, and then suddenly the machine would go crazy. Luckily, recent updates to the Fab Modules seem to have taken care of that problem.&lt;/p&gt;
&lt;p&gt;The second issue was getting the appropriate bits. We had two micro milling bits in the lab: a 0.4mm micromill and a (0.1mm?) V-shaped engraving bit. Unfortunately, neither is &lt;em&gt;quite&lt;/em&gt; the right sized shaft for the collet on the Modela. Our lab manager Graham managed to &lt;a href="http://dictionary.reference.com/browse/jimmy"&gt;jimmy&lt;/a&gt; some filling in the gaps for the V-bit and get it centred pretty well, but it did mean that we couldn't loosen the bit in the collet to drop it onto the surface of the copper. It's pretty easy to set the zero point just by jogging the bit using the controls on the front of the machine though.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="readyToCut" src="http://icchalmers.github.io/images/Week4/readyToCut.jpg" title="This'll be easy! ...." /&gt;&lt;/p&gt;
&lt;p&gt;I used the Fab Modules installed on my laptop (running Linux Mint 17.1 from an external hard drive). I decided to start off trying the V-shaped engraving bit, since it had been centred in the collet and the 0.4mm bit hadn't. With the cut path generated, a z cut depth of -0.15 and a feedrate of 3mm/s, I sent the file to the Modela. &lt;/p&gt;
&lt;p&gt;It was obvious pretty quickly that the bit wasn't going deep enough.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="notDeepEnough" src="http://icchalmers.github.io/images/Week4/notDeepEnough.jpg" title="That's what she said" /&gt;&lt;/p&gt;
&lt;p&gt;I stopped the job, reset the model, increased the cut depth to -0.2mm and restarted the job.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="throughTheCopper" src="http://icchalmers.github.io/images/Week4/throughTheCopper.jpg" title="That white powder makes me happy" /&gt;&lt;/p&gt;
&lt;p&gt;The white powder was a good indication that I was getting all the way through the copper to the FR1 underneath. &lt;/p&gt;
&lt;p&gt;I let the job run to completion, and then decided to try the 0.4mm bit, even though the shaft of the bit was ever-so-slightly too small for the Model (by fractions of a millimetre).
&lt;p align="center" markdown="1"&gt;
&lt;img alt="firstCuts" src="http://icchalmers.github.io/images/Week4/firstCuts.jpg" title="Nothing had gone wrong in a while..." /&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;The top board was done with the 0.4mm bit, and the bottom one with the V-shaped engraving bit. When you're working with bits that are fractions of a millimetre wide, any play in the collet just gets magnified. The top board was certainly usable (although the traces looked a little on the thin side) but the V-shaped bit used for the bottom board gave a cleaner result. &lt;/p&gt;
&lt;p&gt;Of the two, I decided it was worth cutting out the bottom board.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="brokenBit1" src="http://icchalmers.github.io/images/Week4/brokenBit1.jpg" title="Woops! Sorry!" /&gt;&lt;/p&gt;
&lt;p&gt;Woops. I was cutting with the default settings in the Fab Modules, and the 0.8mm bit broke almost instantly. I'm not sure it's the same bit as recommend in the Inventory - our ones seem to be quite a bit longer than the ones I've seen in other peoples pictures of the process. With such a long cutting shaft, in hindsight it's not surprising that the bit broke.&lt;/p&gt;
&lt;p&gt;With a new bit in place, I reduced the feedrate from 4mm/s to 1mm/s, and reduced the cut depth per pass from 0.6mm to 0.3mm (or at least, I thought I had... More on that later).&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cuttingOutBoard" src="http://icchalmers.github.io/images/Week4/cuttingOutBoard.jpg" title="Don't break don't break don't break don't break" /&gt;&lt;/p&gt;
&lt;p&gt;I pretty much held my breath for the entire job, but in the end it finished without incident. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="firstMilledBoard_Vbit" src="http://icchalmers.github.io/images/Week4/firstMilledBoard_Vbit.jpg" title="Phew" /&gt;
&lt;img alt="roughVBitBoard" src="http://icchalmers.github.io/images/Week4/roughVBitBoard.jpg" title="Not the best, but not too bad either" /&gt;&lt;/p&gt;
&lt;p&gt;I now had a board, but I wasn't particularly happy with it. Feeling like I was starting to get the hang of it, I decided to try a few more milling jobs with the V-shaped bit at different settings and compare the results.&lt;/p&gt;
&lt;p&gt;The first one increasing the feedrate to 4mm/s. The job finished, and it looked pretty good. What I didn't realise was that my laptop had died right at the end of the job. I pushed the view button to go back and start the next job, and apparently in it's death throws my laptop sent some junk to the serial port and this happened...&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="brokenBit2" src="http://icchalmers.github.io/images/Week4/brokenBit2.jpg" title="WHY?! WHY WOULD YOU DO THIS?!" /&gt;&lt;/p&gt;
&lt;p&gt;The bit went back to it's last cut point, plunged to the cut depth and then proceeded to go to it's home position... Fair to say that I swore quite a lot, and the bit never survived its ordeal. &lt;/p&gt;
&lt;p&gt;If it hadn't been for the giant gouge through the middle of the board, I would have been pretty happy with that one. As it was, I had space for two more attempts. I tried one at 2mm/s feed rate, but the board must have been a bit unlevel and part of the circuit never cut (the front board in the image below, near the top of the board). I decided that the best result had been with the 4mm/s feed rate, so re-ran the job that had been destroyed.&lt;/p&gt;
&lt;p&gt;It finished fine and the board looked good so I started the board cut out. Then this happened...&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="brokenBit3" src="http://icchalmers.github.io/images/Week4/brokenBit3.jpg" title="First bit I swore, second bit I cried. This third one I sighed forlornly" /&gt;&lt;/p&gt;
&lt;p&gt;I was starting to feel pretty guilty at this point. For those who have lost count, I had broken &lt;strong&gt;three&lt;/strong&gt; bits by this point. I thought that 1mm/s and a cut depth of 0.3mm/s would have been OK, but no. Turns out the last job finishing was a bit of a fluke. I examined the board, and was confused to see that the cut depth was definitely more than 0.3mm.&lt;/p&gt;
&lt;p&gt;Now that I've had some time to reflect, I think I know my mistake. Turns out I had missed a setting...&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="secretSetting" src="http://icchalmers.github.io/images/Week4/secretSetting.png" title="With a giant red box around it, how did I miss it?!" /&gt;&lt;/p&gt;
&lt;p&gt;Yup, the first cut was &lt;strong&gt;ALWAYS 0.6mm&lt;/strong&gt;, regardless of what I had been setting the cut depth to. To be honest it's a miracle I only broke two bits. At least I'll have plenty of opportunities to try again as the weeks go on!&lt;/p&gt;
&lt;p&gt;I was a nervous wreck by this point. With a new bit in, I ran the cut job at 0.5mm/s with a cut depth of 0.2mm. It took ages but as long as I didn't break &lt;em&gt;another&lt;/em&gt; bit, I didn't care. Since I still had the initial cut depth set to 0.6mm, I was lucky I didn't break bit number four.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="betterRoughVBitBoard" src="http://icchalmers.github.io/images/Week4/betterRoughVBitBoard.jpg" title="Good enough for now. No more bits must die for this assignment" /&gt;&lt;/p&gt;
&lt;p&gt;See that thin bit of copper around the USB connector? I'm taking that as proof that I hadn't been imagining that I could actually see the bit bending as the board was cut out. The (possibly imagined) bend meant that the board outline was slightly off, and the board ended up a little larger than intended. It was easy to scrape off the copper with a craft knife, but I did have to file down the edges of the USB so that it would fit in a USB port.&lt;/p&gt;
&lt;p&gt;Anyway, a wash and some light sanding later, I was ready for the easy part: soldering.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="finishedBoardAngle" src="http://icchalmers.github.io/images/Week4/finishedBoardAngle.jpg" title="Not the best of solder jobs, but functional" /&gt;&lt;/p&gt;
&lt;p&gt;This was the first time I had soldered on a PCB like this one, and the first time I had done any 1206 footprints (thats the package size for the resistors and the capacitors). I've got some soldering experience, but it's always been on nice PCBs from fab houses with helpful solder masks. I admit it's not the cleanest of solder jobs but I think that's partly due to the board design (I know, I know. Excuses, excuses). For my own boards I'll make sure that each component has a defined pad i.e. that it's not connecting to one giant copper plane. That should help the surface tension of the solder to pull the solder up around the components, instead of pooling out everywhere. That capacitor at the bottom left of the board is particularly embarrassing.&lt;/p&gt;
&lt;p&gt;After another quick wash (and dry), it was time to program the board. I followed the instructions and everything pretty much worked straight off. I used the &lt;a href="http://www.atmel.com/tools/avrispmkii.aspx"&gt;AVRISP mkII&lt;/a&gt; to do the programming. The only unexpected part was avrdude warning me that the fuses had changed (which didn't seem to happen in the screenshots from the tutorial). I checked that the new fuses bits were sensible and went ahead and ignored the warning (although notice that the screenshot below was from when I first chickened out and reset them!).&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="installFirmware_RescuedFuses" src="http://icchalmers.github.io/images/Week4/installFirmware_RescuedFuses.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;I then plugged the FabTiny* into my USB port, said a quick prayer and....&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="USBtinyDetected" src="http://icchalmers.github.io/images/Week4/USBtinyDetected.png" title="Success!" /&gt;&lt;/p&gt;
&lt;p&gt;Success! The device was recognised as &lt;strong&gt;"Multiple Vendors USBtiny"&lt;/strong&gt; (second line from the bottom).&lt;/p&gt;
&lt;p&gt;Happy that everything was working, I blew the final fuse (so to speak) and the FabTiny* was finished.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="writingFinalFuses" src="http://icchalmers.github.io/images/Week4/writingFinalFuses.png" title="Please don't go wrong at this stage!" /&gt;&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Overall, I thought the whole process was a bit of a &lt;a href="http://dictionary.reference.com/browse/kerfuffle"&gt;kerfuffle&lt;/a&gt;. If you could 100% guarantee a board would come out perfect every time, it would probably be OK. But I think that's rarely the case. I would happily use the Modela for really small, simple circuits that I needed &lt;em&gt;right now&lt;/em&gt;. For example, a little break out board for an SMD chip so that I could quickly test it in a breadboard (I disagree with Neil on breadboards. They're just another tool, and as long as you understand their limitations then they're pretty useful for prototyping).&lt;/p&gt;
&lt;p&gt;Instead of milling, I would much rather just send out a board to somewhere like &lt;a href="www.oshpark.com"&gt;OSHPark&lt;/a&gt;. Sure, I might have to wait a few weeks, but during that time I can happily be doing something else. For almost the same price, I can get professional double sided boards with solder masks, silk screens and all the trimmings. &lt;/p&gt;</summary><category term="weekly classes"></category></entry><entry><title>Bonus Content! Week 3.5: Even More Computer Controlled Cutting</title><link href="http://icchalmers.github.io/bonus-content-week-35-even-more-computer-controlled-cutting.html" rel="alternate"></link><updated>2015-02-16T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-16:bonus-content-week-35-even-more-computer-controlled-cutting.html</id><summary type="html">&lt;h2&gt;Bonus?!&lt;/h2&gt;
&lt;p&gt;Everyone loves a freebie! My &lt;a href="http://icchalmers.github.io/week-3-computer-controlled-cutting.html"&gt;Week 3: Computer Controlled Cutting&lt;/a&gt; post was already on the long side, so I'm splitting the "extra credit" work off to this post.&lt;/p&gt;
&lt;p&gt;So what's the bonus?! Well I tried the vinyl cutter, and cut my &lt;a href="http://icchalmers.github.io/week-2-computer-aided-design.html"&gt;word clock model from Week 2&lt;/a&gt; out in cardboard.&lt;/p&gt;
&lt;h2&gt;The Vinyl Cutter&lt;/h2&gt;
&lt;p&gt;This parts going to be the quickest write up I do. I tried to cut out the Fab Lab logo in vinyl. It worked.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="vinylFabLogo" src="http://icchalmers.github.io/images/Week3/vinylFabLogo.jpg" title="Instant success!" /&gt;&lt;/p&gt;
&lt;p&gt;I did three. One for the lab, one for my logbook and one for future graffiti-ing. The only slight mishap I had was when I tried to cut directly from a roll of vinyl and for some reason it decided to set the origin at the END of the roll. I wish I had a photo of my face as several meters of vinyl come shooting out the front of the plotter.&lt;/p&gt;
&lt;h2&gt;The Cardboard Word Clock&lt;/h2&gt;
&lt;p&gt;Since I had a spare sheet and a half of cardboard left, I thought I would try cutting out the V2.0 model of the word clock.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardWordClock" src="http://icchalmers.github.io/images/Week3/cardboardClock.jpg" title="BOOM!" /&gt;&lt;/p&gt;
&lt;p&gt;Cutting the panel with the front face took just over 8 minutes, which was a lot less than I was expecting with all the fiddly letters to cut. Once again the cardboard impressed me. I fully expected the tiny little struts holding the middle of letters to break but the amount of detail the cardboard held was excellent.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardClockCutTime" src="http://icchalmers.github.io/images/Week3/cardboardClockCutTime.jpg" title="Surprisingly quick" /&gt;
&lt;img alt="cardboardClockFace" src="http://icchalmers.github.io/images/Week3/cardboardClockFace.jpg" title="Look at that 'A'. Just look at it! And that 'R'?! Exquisite." /&gt;&lt;/p&gt;
&lt;p&gt;I was left with a lovely little pile of cardboard letters that I can't quite bring myself to throw out.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardLetters" src="http://icchalmers.github.io/images/Week3/cardboardLetters.jpg" title="I shall put them in a box and play with them every day and keep them forever and ever" /&gt;&lt;/p&gt;
&lt;p&gt;Cutting the clock out in cardboard was exceptionally useful for checking my design. The grid worked out great (even if I did't have quite enough cardboard to hand to cut all of it out).&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardClockPartGrid" src="http://icchalmers.github.io/images/Week3/cardboardClockPartGrid.jpg" title="Just enough to prove it worked" /&gt;
&lt;img alt="cardboardClockGridCloseup" src="http://icchalmers.github.io/images/Week3/cardboardClockGridCloseup.jpg" title="A most excellent fit due to my press-fit experiments" /&gt;&lt;/p&gt;
&lt;p&gt;When putting the middle grid together with the back and sides I realised I had forgotten to chamfer the tabs, which made getting everything together a bit of a &lt;a href="http://www.scotsman.com/gaelic/scottish-word-of-the-day-guddle-1-2915914"&gt;guddle&lt;/a&gt;. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardClockInterior" src="http://icchalmers.github.io/images/Week3/cardboardClockInterior.jpg" title="That took a lot longer than it should have, and involved a lot more swearing" /&gt;&lt;/p&gt;
&lt;p&gt;But hey, that's why I was cutting it out in cardboard in the first place - to find these things out! I also had my first disappointment with the cardboard, which didn't help with getting the frame together. The sheet I was using had been badly stored and had a pretty bad bend in it. It hadn't mattered for the press-fit kit because the pieces were so small, but for the long edges of the clock it was pretty obvious.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardWarp" src="http://icchalmers.github.io/images/Week3/cardboardWarp.jpg" title="It magnificently exceeds all my expectations but one, and I'm bitterly disappointed. Stupid cardboard." /&gt;&lt;/p&gt;
&lt;p&gt;On the bright side, my experimental LED support structure and clip looks like it's going to be just the ticket.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="cardboardClockClipBack" src="http://icchalmers.github.io/images/Week3/cardboardClockClipBack.jpg" title="Success!" /&gt;
&lt;img alt="cardboardClockClipFront" src="http://icchalmers.github.io/images/Week3/cardboardClockClipFront.jpg" title="Breaking new frontiers in laser cut joints" /&gt;&lt;/p&gt;
&lt;p&gt;It's a little early to call it perfect. I still need to try in it ply to check it doesnt flex too much in the middle and let the LED strips slip, and the slot in the middle plate is a &lt;a href="http://www.oxforddictionaries.com/definition/english/wee"&gt;wee&lt;/a&gt; bit near the edge for my liking. I'll give it a bash as is though and can always fix it if it does become a problem.&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;For the Fab Lab logo I never even saved the file. I just loaded a png of the logo in Inkscape, did a bitmap trace and sent it straight to the plotter.&lt;/p&gt;
&lt;p&gt;If you want a cardboard word clock of your very own, as is usual with my bonus content, the files are all &lt;a href="https://github.com/icchalmers/WordClock_v2.0"&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;</summary><category term="weekly classes"></category><category term="final project"></category></entry><entry><title>Week 3: Computer Controlled Cutting</title><link href="http://icchalmers.github.io/week-3-computer-controlled-cutting.html" rel="alternate"></link><updated>2015-02-11T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-11:week-3-computer-controlled-cutting.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to make a press-fit construction kit. "Press-fit" means that the pieces slot together snugly and hold the parts in place by friction alone.&lt;/p&gt;
&lt;p&gt;As well as a press-fit kit of parts that can be put together in different ways, I also cut a press-fit cardboard version of the word clock I modeled &lt;a href="http://icchalmers.github.io/week-2-computer-aided-design.html"&gt;in Week 2: Computer Aided Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although not directly part of the assignment, I also followed Neil's advice and gave the Roland vinyl cutter a whirl.&lt;/p&gt;
&lt;p&gt;The press-fit clock and vinyl cutting can be found in my bonus post: &lt;a href="http://icchalmers.github.io/bonus-content-week-35-even-more-computer-controlled-cutting.html"&gt;Bonus Content! Week 3.5: Even More Computer Controlled Cutting&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Press-fit Construction Kit&lt;/h2&gt;
&lt;p&gt;There were three main steps in making the press-fit construction kit:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Determine the perfect slot width for a good press-fit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design and cut the parts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Play with it!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Finding The Perfect Fit&lt;/h3&gt;
&lt;p&gt;The first step to getting the prefect fit was to measure the lasers kerf. "Kerf" means the width of material burned away by the laser. To get a rough idea of the kerf, I cut out a rectangle split into 5 sections all 10mm square. With our 40W Epilog laser cutter, I found that a vector cut at 30/100/auto (thats 30% speed, 100% power and automatic frequency selection) gave good reliable cuts. I was surprised that the cardboard needed basically the same settings as I've previously used for 3mm plywood! &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="findingKerf" src="http://icchalmers.github.io/images/Week3/measuringCardboardKerf.jpg" title="I lost count of how many times I over tightened the callipers and the squares escaped" /&gt;&lt;/p&gt;
&lt;p&gt;If the laser kerf had been zero, you would expect that measuring all 5 squares would come to exactly 50mm. With 5 squares there are the equivalent of 6 laser widths of material missing (the middle cuts, plus half a width at each end). Doing some quick maths:&lt;/p&gt;
&lt;div class="math"&gt;$$kerf = \frac{(50 - 49.01)}{6} = 0.165mm$$&lt;/div&gt;
&lt;p&gt;I decided that since the cardboard was a bit forgiving and would compress, I would round this to 0.2mm. That means reducing slot widths by 0.2mm, or equivalently doing an offset on the entire part outline of 0.1mm.&lt;/p&gt;
&lt;p&gt;Following previous student &lt;a href="http://academy.cba.mit.edu/2013/students/niespielak.anna/study-documentation.html"&gt;Anna Niespielak's example&lt;/a&gt;, I made a pair of slot rulers for testing the fit.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitRuler" src="http://icchalmers.github.io/images/Week3/pressFitTest.jpg" title="Snug as a bug" /&gt;&lt;/p&gt;
&lt;p&gt;I found that reducing the slot width by 0.1mm gave a good, but not perfect fit. As expected, the -0.2mm slots gave a nice snug fit. The perfect fit was probably somewhere in between, but I went for the tighter fit. As a compromise, I went for slots that were 0.15mm smaller, but also added tiny little nodules of 0.025mm on each side of the slot. I figured this would give a tight fit, but also allow for some variations in the thickness of the cardboard. &lt;/p&gt;
&lt;h3&gt;Designing The Parts&lt;/h3&gt;
&lt;p&gt;I used Inventor to make the parts, since I'm starting to know just enough about it to be dangerous. I decided to go for a hexagon base part, with some straight and curved connectors. Why hexagons? Because I thought I might as well stick with the Catan theme. The hexagon acts as the master, and the other parts update based on its parameters. The size of the hexagon, the slot depths and (of course) the kerf are all parameterised.&lt;/p&gt;
&lt;p&gt;I cut out a few of each part to verify my design, then cut out a whole sheet of them. A 600 x 300mm sheet took just over 14 minutes to cut, and then another 5 to get all the parts out.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitCutting" src="http://icchalmers.github.io/images/Week3/pressFitCutting.jpg" title="14 minutes of praying nothing caught fire" /&gt; &lt;img alt="pressFitParts" src="http://icchalmers.github.io/images/Week3/pressFitParts.jpg" title="Better get the vacuum out" /&gt;&lt;/p&gt;
&lt;h3&gt;Play!&lt;/h3&gt;
&lt;p&gt;I hadn't really expected to have so much fun with the kit. Instead of doing my documentation, I got distracted for well over an hour just making different shapes:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitShapes" src="http://icchalmers.github.io/images/Week3/pressFitShapes.jpg" title="Because anything is better than writing documentation" /&gt;&lt;/p&gt;
&lt;p&gt;My favourite shape was the ball:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitBall" src="http://icchalmers.github.io/images/Week3/pressFitBall.jpg" title="I got worryingly attached to this little guy" /&gt;&lt;/p&gt;
&lt;p&gt;Eventually I settled on keeping the parts in these configurations:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitBestShapes" src="http://icchalmers.github.io/images/Week3/pressFitBestShapes.jpg" title="Oddly satisfying" /&gt;&lt;/p&gt;
&lt;h2&gt;The Good, The Bad And The Dirty&lt;/h2&gt;
&lt;p&gt;Overall I was &lt;strong&gt;really&lt;/strong&gt; impressed with the cardboard. I thought it was going to be rubbish but I can see why Neil was keen for us to give it a try. It's super cheap too, and I can see myself proofing most of my designs in cardboard in the future.&lt;/p&gt;
&lt;p&gt;I was pretty happy with the fit I achieved.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitCloseup" src="http://icchalmers.github.io/images/Week3/pressFitCloseup.jpg" title="Solid" /&gt;&lt;/p&gt;
&lt;p&gt;However, in hindsight, I probably would have been better using the -0.1mm slots, or not bothering to add the nodules to the inside of the slots. For slotting single pieces together the fit was excellent, but when it became time to slot multiple pieces together in 3D shapes the fit was tight enough that some of the parts didn't survive being taken apart again.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitDeaths" src="http://icchalmers.github.io/images/Week3/pressFitDeaths.jpg" title="Gone but not forgotten" /&gt;&lt;/p&gt;
&lt;p&gt;I also realised the parts were a bit more flexible in how they could be put together, as the slots were good for fitting straight onto solid edges too.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitNoSlot" src="http://icchalmers.github.io/images/Week3/pressFitNoSlot.jpg" title="Not that I did anything particularly creative with the discovery" /&gt;&lt;/p&gt;
&lt;p&gt;The big downside to cutting cardboard with a laser? Carbon. &lt;strong&gt;EVERYWHERE&lt;/strong&gt;&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="pressFitDirtyHands" src="http://icchalmers.github.io/images/Week3/pressFitDirtyHands.jpg" title="Guess who wiped his face with these hands" /&gt;&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;As seems to be becoming the norm, file sizes limit what I can add here directly, so you can &lt;a href="https://github.com/icchalmers/PressFitKit"&gt;get all the files on my GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep with the spirit of the archive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/SlotRuler.pdf"&gt;Here is the press-fit ruler&lt;/a&gt; (note that I added the raster labels in CorelDRAW, but they go from left-to-right -0.2 to +0.2mm in 0.1mm increments, as in the picture above)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://icchalmers.github.io/binaries/PressFitKitParts.pdf"&gt;Here is the component press-fit parts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are designed to be cut from 2.5mm cardboard, and the parts use the -0.2mm slot width I've talked about above. Happy press-fitting!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }, linebreaks: { automatic: false, width: 'container' }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="weekly classes"></category></entry><entry><title>Week 2: Computer Aided Design</title><link href="http://icchalmers.github.io/week-2-computer-aided-design.html" rel="alternate"></link><updated>2015-02-04T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-04:week-2-computer-aided-design.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;UPDATED 2015-18-04:&lt;/strong&gt; I've added a section at the end covering the fully parameterised version of the clock model.&lt;/p&gt;
&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week was to model a possible final project. The term "model" is used pretty loosely, meaning draw, render, animate, simulate or pretty much any computer aided design (&lt;strong&gt;CAD&lt;/strong&gt;) method to represent the project.&lt;/p&gt;
&lt;p&gt;As I mention in my &lt;a href="http://icchalmers.github.io/final-project-proposals.html"&gt;Final Project Proposal&lt;/a&gt; page, I've already made V1.0 of a word clock. The files for V1.0 are available &lt;a href="https://github.com/icchalmers/WordClock_v1.0"&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The original model was made in &lt;a href="http://www.autodesk.co.uk/products/inventor/overview"&gt;Autodesk Inventor&lt;/a&gt;, which is &lt;a href="http://www.autodesk.com/education/free-software/all"&gt;available for free to students&lt;/a&gt;. &lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/WordClockModel_v1.0.png" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;The face of each part was then exported as a DWG file and imported into CorelDRAW X6 for layout and adding the lettering, before being cut on the Epilog laser cutter.&lt;/p&gt;
&lt;p&gt;This weeks plan is to improve my existing Inventor model and, if I have time, I'd like to give &lt;a href="http://www.openscad.org/"&gt;OpenSCAD&lt;/a&gt; a try too.&lt;/p&gt;
&lt;h2&gt;So What Needs Fixed?&lt;/h2&gt;
&lt;p&gt;There were a couple of issue with the original model/design:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parameterisation:&lt;/strong&gt; Although I tried to parameterise as much of the model as possible, the only parameter that worked consistently was being able to change the thickness of the plywood. Ideally, I would have liked to be able to parameterise a lot more. For example the number, size and spacing of tabs, or the number of letter positions. The most essential parameter I wanted to be able to control was...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kerf:&lt;/strong&gt; I didn't manage to make kerf a parameter, and in the end I just ignored kerf entirely. I used wood glue to join the grid pieces and the outer frame parts. In actual fact this worked out for the best. Because this essentially slightly compressed the overall size of the outer frame, the front and back plates &lt;em&gt;did&lt;/em&gt; become snap-fit. I had been worried I was going to have to use some kind of hinge to keep the front and back plates removable. Isn't it a nice when things accidentally work out for the better?! That being said, if I swapped to something like acrylic this might not be the case. Parameterised kerf would keep the design nice and flexible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Back Plate:&lt;/strong&gt; There were two problems with the back plate. The first is that I forgot to add a hole for putting in a power socket. The second was that I neglected just how much heat the LEDs would generate. With nowhere for the heat to escape, it started to melt up the glue I had used to secure the LEDs in place. Both of these problems were sorted by adding the appropriate holes using a drill, but since I'm updating the design anyway I want a more elegant solution. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Securing the LEDs:&lt;/strong&gt; I tried two different ways of attaching the LED strips to the interior plate.  The first port of call was to use what most engineers reach for when something needs to be stuck in place: &lt;strong&gt;duct tape&lt;/strong&gt;. Unfortunately, the cheap stuff I had didn't stick very well to the plywood, and the heat from the LEDs was also causing problems. My second port of call was to use what most hobby craft people reach for when something needs to be stuck in place: &lt;strong&gt;hot glue&lt;/strong&gt;. &lt;p align="center" markdown="1"&gt;
&lt;img alt="Glue Gun" src="http://icchalmers.github.io/images/GlueGun.jpg" title="Prepare to make a mess" /&gt;&lt;/p&gt; As I mentioned above the heat from the LEDs was causing the glue to become malleable, resulting in the LED strips being able to shift slightly. Glueing the strips down was also a bit too permanent for my liking. On top of that, as anyone who has ever used a glue gun will know, hot glue is excellent at getting on everything it's not supposed to and generally making a quite remarkable mess for such a small device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Middle Plate:&lt;/strong&gt; The middle plate was OK. Or more precisely, it would have been OK if the LED strips had been consistent. The problem was that the LED strip I was using was actually a whole bunch of smaller strips soldered together. Although the LEDs were nominally 16.7 mm apart (60 LEDs per metre), the overlap between two soldered strips meant that this sometimes decreased by around 2 mm. That's not a lot, but it did mean that the LEDs didn't fit nicely into the grid holes. Instead, I had to de-solder the strips and add some ridiculously short pieces of wire to keep the LED spacing consistent. It worked, but it was pain and a waste of time. It would be much better to have a middle plate that accounted for this potential variance in LED spacing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mounting the Electronics:&lt;/strong&gt; I never added any mounting points for the control electronics. The current version just has them sitting loose in the back. Not pretty, and not good for transport, as they could shake around and damage connections/components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Lettering:&lt;/strong&gt; The letter cut outs were added post-model in CorelDRAW. This added an extra step to the process and therefore an extra potential point of screw up. Also, I want to get away from CorelDRAW, as we only have it installed on one machine in our lab. Porting the layout to Inkscape for cutting would be much better (and easier for other people to work with too).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That list kept getting longer and longer the more I thought about it... I think that's enough to be getting on with for now!&lt;/p&gt;
&lt;h2&gt;So How Far Did I Get...&lt;/h2&gt;
&lt;p&gt;Actually, not very far... &lt;/p&gt;
&lt;p&gt;Surprise surprise, making a model that is completely parametric isn't exactly easy. After a &lt;strong&gt;lot&lt;/strong&gt; of effort, I've managed to get as far as having the outer frame completely parameterised. I can control the overall dimensions, number of tabs, their size and their spacing (independently on each edge) and can take kerf into account for when it comes to laser cutting.&lt;/p&gt;
&lt;p&gt;Here's the progress so far, using the same control dimensions as my V1.0 clock.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Current Progress" src="http://icchalmers.github.io/images/wordClock_v2.0_WorkingFrame1.png" title="So currently further back than I was when I started..." /&gt;&lt;/p&gt;
&lt;p&gt;And here is a different box, using 6 mm ply instead of 3mm, with different overall dimensions and tab parameters on each edge.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Current Progress" src="http://icchalmers.github.io/images/wordClock_v2.0_WorkingFrame2.png" title="...unless you count the fact that I can now make INFINITE VARIATIONS ON A BOX *Jazz hands*" /&gt;&lt;/p&gt;
&lt;p&gt;I'm slowly getting the hang of what &lt;strong&gt;not&lt;/strong&gt; to do when it comes to parameterising designs. For example, don't constrain new geometry on features that might not exist depending on your parameters... That one took me about &lt;em&gt;two hours&lt;/em&gt; to fix. &lt;em&gt;Urgh....&lt;/em&gt; (And yes I am well aware that that &lt;em&gt;sounds&lt;/em&gt; really obvious, but it's an easy mistake to make!)&lt;/p&gt;
&lt;p&gt;The point I'm at as of the time of writing is &lt;a href="https://github.com/icchalmers/WordClock_v2.0/tree/v0.1"&gt;tagged as v0.1 in my GitHub&lt;/a&gt;. I fully intend to get this whole damn clock paramterised. I'll add that future &lt;strong&gt;awesome&lt;/strong&gt; version to the archive once it exists...&lt;/p&gt;
&lt;h2&gt;Update!&lt;/h2&gt;
&lt;p&gt;So I eventually managed to get most of the model parameterised! The base version of the clock can be completely controlled. The size, number of tabs, number of rows and columns of letters... Pretty much everything that I might want to change, can be. &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Current Progress" src="http://icchalmers.github.io/images/Week2/wordClock_v2.0_Model.png" title="No support for the LEDs here." /&gt;&lt;/p&gt;
&lt;p&gt;There were some snags though...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The LED support structure was experimental, so I didn't try overly hard to parameterise it. As a result, there are two version of the model now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/icchalmers/WordClock_v2.0/blob/master/Model/wordClock.ipt"&gt;wordClock.ipt&lt;/a&gt; is the really parameterised version. The downside is that it lacks mounting holes for the electronics and doesn't include the LED strip supports. It also doesn't account for kerf directly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/icchalmers/WordClock_v2.0/blob/master/Model/SolidifiedClockToMake/wordClock_NonParametric.ipt"&gt;wordClock_NonParametric.ipt&lt;/a&gt; includes the LED support structure. It also has derived .ipt files for each part, and within each of those parts I've accounted for kerf. I've called it &lt;em&gt;NonParametric&lt;/em&gt; but actually a large part of it &lt;strong&gt;is&lt;/strong&gt; still parametric. It's just a lot more...&lt;em&gt;flaky&lt;/em&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inventor is rubbish when it comes to handling the extrusion of text. As a work around, I've marked the construction grid on the front face as exportable and it can be used to align text in Inkspace/CorelDRAW. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The .dwg files for laser cutting layout aren't the best. You can't seem to copy a view. You have to re-place the same part over and over. I'm not overly confident in directly sending the files to the laser cutter either, and on top of that I want people without AutoCAD/Inventor to be able to access the final version of files. Instead I've found it best to export the .dwg as PDFs that can be imported to Inkscape/CorelDRAW.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's look at the more interesting but less parameterised version in some more detail.&lt;/p&gt;
&lt;h2&gt;A More "Solid" Word Clock Model&lt;/h2&gt;
&lt;p&gt;By solid, I mean that its specs are more locked down. It's set to use 3mm plywood, be 216 x 216 x 60mm and have a character grid of 11 x 11. It's also got some experimental supports added for holding the LED strips in place.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Current Progress" src="http://icchalmers.github.io/images/Week2/wordClock_v2.0_NonParametricModel.png" title="This clocks knows who it is." /&gt;&lt;/p&gt;
&lt;p&gt;The LED supports are essentially strips of ply that hold the LEDs in place, with the supports being held by some little clips. The clip mechanism looks like this:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="Current Progress" src="http://icchalmers.github.io/images/Week2/wordClock_v2.0_Model_ClipDetail.png" title="I hope this works..." /&gt;&lt;/p&gt;
&lt;p&gt;Basically, the clip slots through, then rotates in the circular hole before being slid to the side to lock it snugly in place. My main concern with the design is that the support pieces will flex too much, and the LED strips in the middle of the clock won't be held tightly in place. If that is the case, I'll cut the supports out of 6mm ply instead. I'm also worried the clips might be a bit thin and prone to snapping. I can thicken them up if needed.&lt;/p&gt;
&lt;p&gt;I've cut this version of the clock out in cardboard. You can read all about it in my &lt;a href="http://icchalmers.github.io/week-3-computer-controlled-cutting.html"&gt;Week 3: Computer Controlled Cutting&lt;/a&gt; post.&lt;/p&gt;
&lt;h2&gt;Get The Files&lt;/h2&gt;
&lt;p&gt;Inventor files are "large". The clock file is only 2MB, but that's large in relation to our limit of only using about 1MB per week for the archive...&lt;/p&gt;
&lt;p&gt;To meet the requirement of having my files in the archive, I'm including the current version (at the time of writing) of the fully parametric model. You can &lt;a href="http://icchalmers.github.io/binaries/wordClock.zip"&gt;download it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;this version is almost certainly out of date&lt;/strong&gt;. I would &lt;strong&gt;highly&lt;/strong&gt; recommend you get the latest and greatest, as well as the solidified version of the clock, from &lt;a href="https://github.com/icchalmers/WordClock_v2.0"&gt;my GitHub&lt;/a&gt;.&lt;/p&gt;</summary><category term="weekly classes"></category><category term="final project"></category></entry><entry><title>Final Project Proposals</title><link href="http://icchalmers.github.io/final-project-proposals.html" rel="alternate"></link><updated>2015-02-02T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-02-02:final-project-proposals.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;"Nothing is more dangerous than an idea when it is the only one you have." - Emile Chartier&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've actually got a few potential final projects, and I have no doubt that I'll think of more as the weeks go on. Here's what I've thought of so far.&lt;/p&gt;
&lt;h2&gt;Word Clock&lt;/h2&gt;
&lt;p&gt;For my Mum's Christmas last year I decided I would make her a word clock. It was inspired by &lt;a href="http://imgur.com/a/iMXmj?gallery"&gt;this word clock posted on imgur&lt;/a&gt;. Here's my version:&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/wordClock_v1.jpg" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;I started thinking about making it in August. It was going to have an app that connected over Bluetooth to set the time (and re-sync the time to the phone automatically when it was in range, &lt;em&gt;obviously&lt;/em&gt;...), chose the colour of the LEDs and set alarms. It was going to have a beautiful teak fame (I even took an evening class in woodworking so I could make it). It was going to have a custom PCB I had had made at &lt;a href="https://oshpark.com/"&gt;OSH Park&lt;/a&gt;, running on an ARM Cortex M0+ (and it certainly was &lt;strong&gt;NOT&lt;/strong&gt; going to use two Arduinos or have the kind-of-beautiful but also kind-of-vomit-inducing wiring of the one I was using for inspiration).&lt;/p&gt;
&lt;p&gt;It was going to be &lt;strong&gt;AWESOME&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And then I ended up doing all of the work in a panicked two days at the end of December because our FabLab was closing a week earlier than I expected and I &lt;em&gt;obviously&lt;/em&gt; hadn't had the time to work on it between August and December...&lt;/p&gt;
&lt;p&gt;But hey, it worked, and my Mum loved it. Take the front off and put it in test mode and it even makes a pretty good disco light.&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/insideWordClock_v1.jpg" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;I promised her a revised version "soon". One where she could do all (&lt;strong&gt;cough&lt;/strong&gt; &lt;em&gt;some&lt;/em&gt; &lt;strong&gt;cough&lt;/strong&gt;) of the above. Especially the necessary things like, you know, being able to set the time... (It works for now. It uses a battery backed RTC that shouldn't be off by more than a minute over an entire year. It only has a time resolution of five minutes anyway).&lt;/p&gt;
&lt;h3&gt;However...&lt;/h3&gt;
&lt;p&gt;I feel like it's cheating choosing a final project where I already have a V1.0. Instead, I'll probably do V2.0 development as part of my weekly classes. Maybe add some capacitive touch buttons hidden under the wood, or an ESP8266 to pull network time in over WiFi. Perhaps add a light sensor to automatically control the brightness of the LEDs so they don't blind you at night. Who knows. Time will tell.&lt;/p&gt;
&lt;h2&gt;Light Up Catan Table&lt;/h2&gt;
&lt;p&gt;Forget Monopoly. All it's good for is destroying friendships.&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/monopolyFlip.jpg" title="Seriously, don't play it" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Instead, play &lt;a href="http://www.catan.com/"&gt;Catan&lt;/a&gt;. My first impression was "wow this looks super nerdy". Not that there's anything &lt;em&gt;wrong&lt;/em&gt; with super nerdy. In actual fact, all the cool kids are playing it - &lt;a href="http://www.washingtonpost.com/blogs/early-lead/wp/2015/01/16/the-green-bay-packers-are-obsessed-with-settlers-of-catan/"&gt;even the Green Bay Packers&lt;/a&gt; (who may or may not be cool. I have no idea. I hate American football).&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src ="http://icchalmers.github.io/images/catanBaseBoard.jpg" title="So much more fun. Source: https://garydgardiner.files.wordpress.com/2012/06/settlersofcatan.jpg" /&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;There is one big problem with Catan though: the board. Over time, those cardboard pieces warp and it becomes &lt;strong&gt;IMPOSSIBLE&lt;/strong&gt; to get a flat board that stays together. It also takes &lt;strong&gt;FOREVER&lt;/strong&gt; to set up. That picture is just the base game for 3-4 players. Throw in an expansion pack and increase it to 5-6 players and suddenly setting up the board can take almost as long as actually playing.&lt;/p&gt;
&lt;p&gt;Lots of people have tried to solve these problems. The board has been &lt;a href="https://www.kickstarter.com/projects/trammel/the-official-settlers-of-catan-gaming-board"&gt;kickstarted&lt;/a&gt;, &lt;a href="http://www.iceboxrobotics.com/blog/2012/1/19/settlers-of-catan-3d-game-board.html"&gt;3D printed&lt;/a&gt; and &lt;a href="http://www.instructables.com/id/Custom-Laser-Cut-Catan-Board/"&gt;laser cut&lt;/a&gt;. Hell, it's even been &lt;a href="http://www.instructables.com/id/Catan-Cakes/"&gt;baked&lt;/a&gt;. You could probably complete the entire Fab Academy doing projects based just on the Catan board.&lt;/p&gt;
&lt;p&gt;But I have yet to see a version of Catan that uses the electronic component closest to any electronic engineer's heart: &lt;strong&gt;LEDs&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;The Plan&lt;/h3&gt;
&lt;p&gt;The idea is to make a coffee table with embedded RGB LEDs, similar to this one:&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;a href="http://imgur.com/a/CGV17"&gt;&lt;img src ="http://icchalmers.github.io/images/LEDTable.jpg" title="Pretty damn cool" /&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Instead of having a square grid, it would have a hexagonal one. You could automatically generate a game board, or load a favourite one. It could even be linked into an app to allow control of the table/game (app development &lt;em&gt;*shudder*&lt;/em&gt;). You would still need the pieces from the original game (no bad thing - with such easy digital fabrication, board game piracy is already becoming a thing), but overall set up time would be reduced and the board would be relatively frustration free. There are a whole host of extra features that I could implement too.&lt;/p&gt;
&lt;p&gt;Obviously there are some glaring challenges from the get go. Making a hexagonal grid would be difficult, and making a table isn't exactly easy. Although there is the "Make Something Big" week, our FabLab doesn't actually have a large format CNC machine. We'll be going to &lt;a href="http://www.maklab.co.uk/"&gt;MAKLab&lt;/a&gt; to complete that assignment, but something like an LED table would need more time than we have allotted. If it comes to it, I could make a smaller, non-table, version.&lt;/p&gt;
&lt;p&gt;Overall though, this is the idea that I'm most excited about, so it's the goal for now. Ask me how I feel about it the day before projects are due.&lt;/p&gt;
&lt;h2&gt;Home Automation&lt;/h2&gt;
&lt;p&gt;I also have some much more ephemeral ideas about home automation. A lovely wireless network of sensors controlling everything I can conceivably think might benefit (or not) from a connection to the internet. The Internet of Things is all the rage right now after all. Does my bin really &lt;em&gt;need&lt;/em&gt; to be connected to the internet?! Why the hell not!&lt;/p&gt;
&lt;p&gt;This idea is pretty much on the back burners for now. I might do a mini version for the networking week. After all, I am doing a PhD in wireless communications, and there is nothing an engineer loves more than showing off. &lt;em&gt;[Famous last words....]&lt;/em&gt;&lt;/p&gt;</summary><category term="final project"></category></entry><entry><title>Week 1: Principles, Practices and Project Management</title><link href="http://icchalmers.github.io/week-1-principles-practices-and-project-management.html" rel="alternate"></link><updated>2015-01-28T00:00:00+00:00</updated><author><name>Iain Chalmers</name></author><id>tag:icchalmers.github.io,2015-01-28:week-1-principles-practices-and-project-management.html</id><summary type="html">&lt;h2&gt;This Weeks Assignment&lt;/h2&gt;
&lt;p&gt;The assignment for this week is split into two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build a personal site in the class archive to track my progress through the Fab Academy&lt;/li&gt;
&lt;li&gt;Document some potential final projects&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This post is about how I went about designing this website. My ideas for a potential final project can be found in the &lt;a href="http://icchalmers.github.io/final-project-proposals.html"&gt;Final Project Proposal&lt;/a&gt; post.&lt;/p&gt;
&lt;h2&gt;Building a Website&lt;/h2&gt;
&lt;p&gt;I've not done any web development since I was in high school, coding in raw HTML in notepad, so I had to do quite a bit of research and experimenting to bring myself up to speed.&lt;/p&gt;
&lt;p&gt;Based on the limitations imposed by the Fab Academy archive (static files only, no database, PHP etc.) I decided that I would try and use a static site generator. There were a &lt;strong&gt;lot&lt;/strong&gt; to choose from. In the end I narrowed my selection down to two:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;: Described as "&lt;em&gt;A blogging framework for hackers&lt;/em&gt;". It's a static site generator based on Jekyll and uses Ruby.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/"&gt;Pelican&lt;/a&gt;: A static site generator based on Python.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My main reason for going down the static site generator route was that I can focus on content, leaving a lot of the HTML, CSS and JavaScript production "behind-the-scenes".&lt;/p&gt;
&lt;p&gt;I decided to give Octopress a try first, as it looked to be the more popular option.&lt;/p&gt;
&lt;h2&gt;Trying Octopress&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A blogging framework for hackers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds just like what I was looking for! Here's the thing - I tried setting Octopress up on three different machines, on both Windows and Linux Mint, and had a different set of problems for every install. It was a nightmare. While I do most of my development on Windows, I do jump into Linux sometimes so I wanted a workflow that would work happily across both platforms. On top of that, not being able to get through a "Getting Started" style tutorial without errors, not once but &lt;strong&gt;THREE&lt;/strong&gt; times, is usually a sign to move onto something else.&lt;/p&gt;
&lt;p&gt;Most of the install problems revolved around getting Ruby installed and working correctly. Never having looked at a line of Ruby in my life also wasn't going to help if I did find I had to jump into the source to change something to work how I wanted it.&lt;/p&gt;
&lt;h2&gt;Trying Pelican&lt;/h2&gt;
&lt;p&gt;Pelican was next for evaluation, and thankfully it went a lot better. For starters, I've managed to install it on all three of my computers, in both Windows and Linux Mint. I'm also "conversational" in Python, so having an engine written in a language I can make changes in is a big plus.&lt;/p&gt;
&lt;p&gt;Having got a basic site up and running without any issue, I started looking at customisation for my Fab Academy site. Theming in Pelican is pretty easy - just grab the theme and point to its location in your &lt;code&gt;pelicanconf.py&lt;/code&gt; file. Mobile devices were something I never had to consider back when I was using raw HTML in high school, but I think making a site today that isn't mobile compatible is pretty lazy. &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; seemed like it was just what I needed, and there was already a Pelican theme based on Bootstrap3: &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; by &lt;a href="https://github.com/DandyDev"&gt;Daan Debie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm still working on customising the theme to really get what I want, but it has a lot of really cool feature built in that should "just work". For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My posts &lt;em&gt;should&lt;/em&gt; have a comments section using &lt;a href="http://www.disqus.com"&gt;Disqus&lt;/a&gt; (They work in my local serve of the website. If they work on the Fab Archive will be another matter!).&lt;/li&gt;
&lt;li&gt;I've got buttons for various social networks so that people can +1, Like and Tweet my articles in one click. It's all done through a service called &lt;a href="http://www.addthis.com/"&gt;AddThis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the features I'm looking to add are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.google.com/analytics/"&gt;Google Analytics&lt;/a&gt;, so that I can keep a track of who (if anyone!) is looking at my site. This should be pretty easy to setup, as the pelican-bootstrap3 theme already has support built it.&lt;/li&gt;
&lt;li&gt;A better navigation menu. I think a navigation menu that sits to the left of the main content works well for Fab Academy style sites, and I would have it collapse to the top for narrow (i.e. mobile) devices. Getting this up and running is involving a bit more customisation of the theme than I can manage this week.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll likely continue to make improvements to the site as the weeks go on. I've only just scratched the surface of web development but I'm really starting to enjoy it. Once I get more familiar with the "how" I can focus on the really hard bit: good design.&lt;/p&gt;
&lt;h2&gt;Site Source&lt;/h2&gt;
&lt;p&gt;All of the source for this site is in my BitBucket. Because I forked the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme to make my own custom version, &lt;code&gt;pelican-bootstrap-fabacademy&lt;/code&gt;, it's hosted on my GitHub. I've managed to embed the theme on GitHub &lt;em&gt;inside&lt;/em&gt; the Mercurial repo for the site. Probably a terrible idea, but it seems to work quite nicely.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get the website source here: &lt;a href="https://bitbucket.org/icchalmers/fabacademy2015_site"&gt;https://bitbucket.org/icchalmers/fabacademy2015_site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get just the theme here: &lt;a href="https://github.com/icchalmers/pelican-bootstrap3-fabacademy"&gt;https://github.com/icchalmers/pelican-bootstrap3-fabacademy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;So, Is A Static Site Generator Worth It?&lt;/h2&gt;
&lt;p&gt;In short, no.&lt;/p&gt;
&lt;p&gt;As with most things in life, &lt;a href="http://xkcd.com/"&gt;xkcd&lt;/a&gt; explains it better than I can:&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img alt="xkcd: Automating" src="http://imgs.xkcd.com/comics/automation.png" title="'Automating' comes from the roots 'auto-' meaning 'self-', and 'mating', meaning 'screwing'." /&gt;   &lt;img alt="xkcd: Is It Worth The Time?" src="http://imgs.xkcd.com/comics/is_it_worth_the_time.png" title="Don't forget the time you spend finding the chart to look up what you save. And the time spent reading this reminder about the time spent. And the time trying to figure out if either of those actually make sense. Remember, every second counts toward your life total, including these right now." /&gt;&lt;/p&gt;
&lt;p&gt;Don't get me wrong, static site generators are great, and I especially like Pelican. The main problem is that they are all pretty much geared up for blog-style websites and that's not a format I think works well for a Fab Academy site. The best Fab Academy sites I've seen all have a pretty basic structure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An "About Me" page&lt;/li&gt;
&lt;li&gt;A section for weekly classes.&lt;/li&gt;
&lt;li&gt;A section for the final project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most importantly, Fab Academy sites have finite content. Let me clarify that: Fab Academy sites have a set number of pages and are only active for a couple of months. This isn't a blog I'll be writing forever and ever. In order to get the structure I wanted, I've basically been taking a hammer to the theme and content templates. And it's still not there. I would have been a lot quicker just setting up some basic temples to make a skeleton site and just filling in the content as I went.&lt;/p&gt;
&lt;p&gt;Ah well. Live and learn. That's pretty much what this whole process is about anyway!&lt;/p&gt;
&lt;p&gt;Now the real test: leave a comment, if they're working :P&lt;/p&gt;
&lt;h2&gt;Update! 2015-02-05&lt;/h2&gt;
&lt;p&gt;So comments worked fine (yay!), but none of my links to internal content worked in the version I had on the Fab Academy archive (I have a test version hosted &lt;a href="http://icchalmers.github.io"&gt;on my GitHub&lt;/a&gt;). The problem was that on Windows, I couldn’t use the &lt;code&gt;{filename}/path/to/content&lt;/code&gt; syntax to link to internal content like images and other pages. Pelican just complained that it couldn't find the files and didn't update the URL.&lt;/p&gt;
&lt;p&gt;The result was that the absolute links I used instead worked fine on a local serve and on my GitHub because my site lived at the domain root i.e. it was at &lt;code&gt;http://icchalmers.github.io/&lt;/code&gt; and not a level down such as &lt;code&gt;http://icchalmers.github.io/blog&lt;/code&gt;. I had been assuming that having &lt;code&gt;SITEURL = 'http://fabacademy.org/archives/2015/eu/students/chalmers.iain'&lt;/code&gt; would cause my “absolute” links to be absolute to &lt;code&gt;SITEURL&lt;/code&gt; and not just to fabacademy.org. Oh well...&lt;/p&gt;
&lt;p&gt;So for now, this site can only be reliably generated on &lt;em&gt;*nix&lt;/em&gt; systems. My thanks to &lt;a href="https://github.com/avaris"&gt;Avaris&lt;/a&gt; on the #Pelican IRC channel for his help. We might not have fixed the problem, but it's nice to know there are active developers willing to help. Maybe I'll find the time to try diving into the Pelican source to see if I can fix the problem. It's about time I tried my first ever pull request on an open source project...&lt;/p&gt;</summary><category term="weekly classes"></category></entry></feed>